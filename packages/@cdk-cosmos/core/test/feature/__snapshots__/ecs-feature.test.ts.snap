// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ECS Feature Extension should match snapshot 1`] = `
Object {
  "Description": "Cosmos SolarSystem Extension: App resources dependant on each App Env, like Services and Databases.",
}
`;

exports[`ECS Feature should match snapshot 1`] = `
Object {
  "Description": "Cosmos SolarSystem: Resources dependant on each App Env, like Vpc and MainZone.",
  "Outputs": Object {
    "PrivateZoneZoneId": Object {
      "Export": Object {
        "Name": "CoreGalSysPrivateZoneId",
      },
      "Value": Object {
        "Ref": "PrivateZone",
      },
    },
    "PrivateZoneZoneName": Object {
      "Export": Object {
        "Name": "CoreGalSysPrivateZoneName",
      },
      "Value": "sys.internal",
    },
    "VpcAZs": Object {
      "Export": Object {
        "Name": "CoreGalSysVpcAZs",
      },
      "Value": Object {
        "Fn::Join": Array [
          ",",
          Array [
            Object {
              "Fn::Select": Array [
                0,
                Object {
                  "Fn::GetAZs": "",
                },
              ],
            },
            Object {
              "Fn::Select": Array [
                1,
                Object {
                  "Fn::GetAZs": "",
                },
              ],
            },
          ],
        ],
      },
    },
    "VpcCidrBlock": Object {
      "Export": Object {
        "Name": "CoreGalSysVpcCidrBlock",
      },
      "Value": Object {
        "Fn::ImportValue": "CoreCosGalGalaxy:GalExportsOutputFnGetAttSharedVpcOutputsCosGalSharedVpcEA1B9578CidrBlockF3542C65",
      },
    },
    "VpcId": Object {
      "Export": Object {
        "Name": "CoreGalSysVpcId",
      },
      "Value": Object {
        "Fn::ImportValue": "CoreCosGalGalaxy:GalExportsOutputFnGetAttSharedVpcOutputsCosGalSharedVpcEA1B9578Ref35210733",
      },
    },
    "VpcIsolatedSubnetRouteTables": Object {
      "Export": Object {
        "Name": "CoreGalSysVpcIsolatedSubnetRouteTableIds",
      },
      "Value": Object {
        "Fn::Join": Array [
          ",",
          Array [
            Object {
              "Fn::ImportValue": "CoreCosGalGalaxy:GalExportsOutputFnGetAttSharedVpcOutputsCosGalSharedVpcAppSubnet1RouteTable688214BDRefC3174DB1",
            },
            Object {
              "Fn::ImportValue": "CoreCosGalGalaxy:GalExportsOutputFnGetAttSharedVpcOutputsCosGalSharedVpcAppSubnet2RouteTable4054ECB4Ref27E06E84",
            },
          ],
        ],
      },
    },
    "VpcIsolatedSubnets": Object {
      "Export": Object {
        "Name": "CoreGalSysVpcIsolatedSubnetIds",
      },
      "Value": Object {
        "Fn::Join": Array [
          ",",
          Array [
            Object {
              "Fn::ImportValue": "CoreCosGalGalaxy:GalExportsOutputFnGetAttSharedVpcOutputsCosGalSharedVpcAppSubnet1Subnet4ACE937ERefB0DC012F",
            },
            Object {
              "Fn::ImportValue": "CoreCosGalGalaxy:GalExportsOutputFnGetAttSharedVpcOutputsCosGalSharedVpcAppSubnet2Subnet0D4DDC84RefB858A527",
            },
          ],
        ],
      },
    },
    "ZoneId": Object {
      "Export": Object {
        "Name": "CoreGalSysZoneId",
      },
      "Value": Object {
        "Ref": "Zone",
      },
    },
    "ZoneName": Object {
      "Export": Object {
        "Name": "CoreGalSysZoneName",
      },
      "Value": "sys.cos.com",
    },
    "ZoneNameServers": Object {
      "Export": Object {
        "Name": "CoreGalSysZoneNameServers",
      },
      "Value": Object {
        "Fn::Join": Array [
          ",",
          Object {
            "Fn::GetAtt": Array [
              "Zone",
              "NameServers",
            ],
          },
        ],
      },
    },
  },
  "Parameters": Object {
    "AssetParameters95ba2ed22f4fbd1c84cafbf5eb719bf15e75b2363da42976da1d54ea3bc5cf43ArtifactHash": Object {
      "Description": "Artifact hash for asset \\"95ba2ed22f4fbd1c84cafbf5eb719bf15e75b2363da42976da1d54ea3bc5cf43\\"",
      "Type": "String",
    },
    "AssetParameters95ba2ed22f4fbd1c84cafbf5eb719bf15e75b2363da42976da1d54ea3bc5cf43S3Bucket": Object {
      "Description": "S3 bucket for asset \\"95ba2ed22f4fbd1c84cafbf5eb719bf15e75b2363da42976da1d54ea3bc5cf43\\"",
      "Type": "String",
    },
    "AssetParameters95ba2ed22f4fbd1c84cafbf5eb719bf15e75b2363da42976da1d54ea3bc5cf43S3VersionKey": Object {
      "Description": "S3 key for asset version \\"95ba2ed22f4fbd1c84cafbf5eb719bf15e75b2363da42976da1d54ea3bc5cf43\\"",
      "Type": "String",
    },
  },
  "Resources": Object {
    "CertificateRequestorFunction": Object {
      "DependsOn": Array [
        "CertificateRequestorFunctionServiceRoleDefaultPolicy",
        "CertificateRequestorFunctionServiceRole",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": "s3BucketName",
          "S3Key": "s3ObjectKey",
        },
        "Handler": "index.certificateRequestHandler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "CertificateRequestorFunctionServiceRole",
            "Arn",
          ],
        },
        "Runtime": "nodejs10.x",
        "Tags": Array [
          Object {
            "Key": "cosmos",
            "Value": "Cos",
          },
          Object {
            "Key": "cosmos:galaxy",
            "Value": "Gal",
          },
          Object {
            "Key": "cosmos:solarsystem",
            "Value": "Sys",
          },
        ],
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "CertificateRequestorFunctionServiceRole": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
        "Tags": Array [
          Object {
            "Key": "cosmos",
            "Value": "Cos",
          },
          Object {
            "Key": "cosmos:galaxy",
            "Value": "Gal",
          },
          Object {
            "Key": "cosmos:solarsystem",
            "Value": "Sys",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CertificateRequestorFunctionServiceRoleDefaultPolicy": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "acm:RequestCertificate",
                "acm:DescribeCertificate",
                "acm:DeleteCertificate",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "route53:GetChange",
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "route53:changeResourceRecordSets",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":route53:::hostedzone/",
                    Object {
                      "Ref": "Zone",
                    },
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CertificateRequestorFunctionServiceRoleDefaultPolicy",
        "Roles": Array [
          Object {
            "Ref": "CertificateRequestorFunctionServiceRole",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CertificateRequestorResource": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "DomainName": "sys.cos.com",
        "HostedZoneId": Object {
          "Ref": "Zone",
        },
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "CertificateRequestorFunction",
            "Arn",
          ],
        },
        "SubjectAlternativeNames": Array [
          "*.sys.cos.com",
        ],
      },
      "Type": "AWS::CloudFormation::CustomResource",
      "UpdateReplacePolicy": "Delete",
    },
    "Ecs": Object {
      "Properties": Object {
        "Parameters": Object {
          "referencetoCosGalSysCertificateCertificateRequestorResourceA8D7E5EEArn": Object {
            "Fn::GetAtt": Array [
              "CertificateRequestorResource",
              "Arn",
            ],
          },
          "referencetoCosGalSysZone702627E2Ref": Object {
            "Ref": "Zone",
          },
        },
        "Tags": Array [
          Object {
            "Key": "cosmos",
            "Value": "Cos",
          },
          Object {
            "Key": "cosmos:galaxy",
            "Value": "Gal",
          },
          Object {
            "Key": "cosmos:solarsystem",
            "Value": "Sys",
          },
        ],
        "TemplateURL": Object {
          "Fn::Join": Array [
            "",
            Array [
              "https://s3.",
              Object {
                "Ref": "AWS::Region",
              },
              ".",
              Object {
                "Ref": "AWS::URLSuffix",
              },
              "/",
              Object {
                "Ref": "AssetParameters95ba2ed22f4fbd1c84cafbf5eb719bf15e75b2363da42976da1d54ea3bc5cf43S3Bucket",
              },
              "/",
              Object {
                "Fn::Select": Array [
                  0,
                  Object {
                    "Fn::Split": Array [
                      "||",
                      Object {
                        "Ref": "AssetParameters95ba2ed22f4fbd1c84cafbf5eb719bf15e75b2363da42976da1d54ea3bc5cf43S3VersionKey",
                      },
                    ],
                  },
                ],
              },
              Object {
                "Fn::Select": Array [
                  1,
                  Object {
                    "Fn::Split": Array [
                      "||",
                      Object {
                        "Ref": "AssetParameters95ba2ed22f4fbd1c84cafbf5eb719bf15e75b2363da42976da1d54ea3bc5cf43S3VersionKey",
                      },
                    ],
                  },
                ],
              },
            ],
          ],
        },
      },
      "Type": "AWS::CloudFormation::Stack",
    },
    "PrivateZone": Object {
      "Properties": Object {
        "HostedZoneConfig": Object {
          "Comment": "Core Main Private Zone for Sys SolarSystem",
        },
        "HostedZoneTags": Array [
          Object {
            "Key": "cosmos",
            "Value": "Cos",
          },
          Object {
            "Key": "cosmos:galaxy",
            "Value": "Gal",
          },
          Object {
            "Key": "cosmos:solarsystem",
            "Value": "Sys",
          },
        ],
        "Name": "sys.internal.",
        "VPCs": Array [
          Object {
            "VPCId": Object {
              "Fn::ImportValue": "CoreCosGalGalaxy:GalExportsOutputFnGetAttSharedVpcOutputsCosGalSharedVpcEA1B9578Ref35210733",
            },
            "VPCRegion": Object {
              "Ref": "AWS::Region",
            },
          },
        ],
      },
      "Type": "AWS::Route53::HostedZone",
    },
    "Zone": Object {
      "Properties": Object {
        "HostedZoneConfig": Object {
          "Comment": "Core Main Zone for Sys SolarSystem",
        },
        "HostedZoneTags": Array [
          Object {
            "Key": "cosmos",
            "Value": "Cos",
          },
          Object {
            "Key": "cosmos:galaxy",
            "Value": "Gal",
          },
          Object {
            "Key": "cosmos:solarsystem",
            "Value": "Sys",
          },
        ],
        "Name": "sys.cos.com.",
      },
      "Type": "AWS::Route53::HostedZone",
    },
    "ZoneDelegation": Object {
      "Properties": Object {
        "Comment": "Core Zone Delegation for Sys SolarSystem.",
        "HostedZoneId": Object {
          "Fn::ImportValue": "CoreCosCosmos:ExportsOutputRefRootZone2F3E9CEF",
        },
        "Name": "sys.cos.com.",
        "ResourceRecords": Object {
          "Fn::GetAtt": Array [
            "Zone",
            "NameServers",
          ],
        },
        "TTL": "1800",
        "Type": "NS",
      },
      "Type": "AWS::Route53::RecordSet",
    },
  },
}
`;

exports[`ECS Feature should match snapshot 2`] = `
Object {
  "Description": "Adds Ecs Features to the SolarSystem",
  "Outputs": Object {
    "AlbArn": Object {
      "Export": Object {
        "Name": "CoreGalSysAlbArn",
      },
      "Value": Object {
        "Ref": "Alb",
      },
    },
    "AlbDnsHostZoneId": Object {
      "Export": Object {
        "Name": "CoreGalSysAlbDnsHostZoneId",
      },
      "Value": Object {
        "Fn::GetAtt": Array [
          "Alb",
          "CanonicalHostedZoneID",
        ],
      },
    },
    "AlbDnsName": Object {
      "Export": Object {
        "Name": "CoreGalSysAlbDnsName",
      },
      "Value": Object {
        "Fn::GetAtt": Array [
          "Alb",
          "DNSName",
        ],
      },
    },
    "AlbHttpInternalListenerAlArn": Object {
      "Export": Object {
        "Name": "CoreGalSysHttpInternalListenerArn",
      },
      "Value": Object {
        "Ref": "AlbHttpInternalListener",
      },
    },
    "AlbHttpInternalListenerAlSecurityGroupId": Object {
      "Export": Object {
        "Name": "CoreGalSysHttpInternalListenerSecurityGroupId",
      },
      "Value": Object {
        "Fn::GetAtt": Array [
          "AlbSecurityGroup",
          "GroupId",
        ],
      },
    },
    "AlbHttpListenerAlArn": Object {
      "Export": Object {
        "Name": "CoreGalSysHttpListenerArn",
      },
      "Value": Object {
        "Ref": "AlbHttpListener",
      },
    },
    "AlbHttpListenerAlSecurityGroupId": Object {
      "Export": Object {
        "Name": "CoreGalSysHttpListenerSecurityGroupId",
      },
      "Value": Object {
        "Fn::GetAtt": Array [
          "AlbSecurityGroup",
          "GroupId",
        ],
      },
    },
    "AlbHttpsInternalListenerAlArn": Object {
      "Export": Object {
        "Name": "CoreGalSysHttpsInternalListenerArn",
      },
      "Value": Object {
        "Ref": "AlbHttpsInternalListener",
      },
    },
    "AlbHttpsInternalListenerAlSecurityGroupId": Object {
      "Export": Object {
        "Name": "CoreGalSysHttpsInternalListenerSecurityGroupId",
      },
      "Value": Object {
        "Fn::GetAtt": Array [
          "AlbSecurityGroup",
          "GroupId",
        ],
      },
    },
    "AlbHttpsListenerAlArn": Object {
      "Export": Object {
        "Name": "CoreGalSysHttpsListenerArn",
      },
      "Value": Object {
        "Ref": "AlbHttpsListener",
      },
    },
    "AlbHttpsListenerAlSecurityGroupId": Object {
      "Export": Object {
        "Name": "CoreGalSysHttpsListenerSecurityGroupId",
      },
      "Value": Object {
        "Fn::GetAtt": Array [
          "AlbSecurityGroup",
          "GroupId",
        ],
      },
    },
    "AlbSecurityGroupId": Object {
      "Export": Object {
        "Name": "CoreGalSysAlbSecurityGroupId",
      },
      "Value": Object {
        "Fn::GetAtt": Array [
          "AlbSecurityGroup",
          "GroupId",
        ],
      },
    },
    "ClusterName": Object {
      "Export": Object {
        "Name": "CoreGalSysClusterName",
      },
      "Value": Object {
        "Ref": "Cluster",
      },
    },
    "ClusterSecurityGroup": Object {
      "Export": Object {
        "Name": "CoreGalSysClusterSecurityGroup",
      },
      "Value": Object {
        "Fn::GetAtt": Array [
          "ClusterDefaultAutoScalingGroupInstanceSecurityGroup",
          "GroupId",
        ],
      },
    },
  },
  "Parameters": Object {
    "SsmParameterValueawsserviceecsoptimizedamiamazonlinux2recommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter": Object {
      "Default": "/aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id",
      "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
    },
    "referencetoCosGalSysCertificateCertificateRequestorResourceA8D7E5EEArn": Object {
      "Type": "String",
    },
    "referencetoCosGalSysZone702627E2Ref": Object {
      "Type": "String",
    },
  },
  "Resources": Object {
    "Alb": Object {
      "Properties": Object {
        "LoadBalancerAttributes": Array [
          Object {
            "Key": "deletion_protection.enabled",
            "Value": "false",
          },
        ],
        "Name": "CoreGalSysAlb",
        "Scheme": "internal",
        "SecurityGroups": Array [
          Object {
            "Fn::GetAtt": Array [
              "AlbSecurityGroup",
              "GroupId",
            ],
          },
        ],
        "Subnets": Array [
          Object {
            "Fn::ImportValue": "CoreCosGalGalaxy:GalExportsOutputFnGetAttSharedVpcOutputsCosGalSharedVpcAppSubnet1Subnet4ACE937ERefB0DC012F",
          },
          Object {
            "Fn::ImportValue": "CoreCosGalGalaxy:GalExportsOutputFnGetAttSharedVpcOutputsCosGalSharedVpcAppSubnet2Subnet0D4DDC84RefB858A527",
          },
        ],
        "Tags": Array [
          Object {
            "Key": "cosmos",
            "Value": "Cos",
          },
          Object {
            "Key": "cosmos:feature",
            "Value": "Ecs",
          },
          Object {
            "Key": "cosmos:galaxy",
            "Value": "Gal",
          },
          Object {
            "Key": "cosmos:solarsystem",
            "Value": "Sys",
          },
        ],
        "Type": "application",
      },
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
    },
    "AlbHttpInternalListener": Object {
      "Properties": Object {
        "DefaultActions": Array [
          Object {
            "FixedResponseConfig": Object {
              "ContentType": "text/plain",
              "MessageBody": "Route Not Found.",
              "StatusCode": "404",
            },
            "Type": "fixed-response",
          },
        ],
        "LoadBalancerArn": Object {
          "Ref": "Alb",
        },
        "Port": 8080,
        "Protocol": "HTTP",
      },
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
    },
    "AlbHttpListener": Object {
      "Properties": Object {
        "DefaultActions": Array [
          Object {
            "FixedResponseConfig": Object {
              "ContentType": "text/plain",
              "MessageBody": "Route Not Found.",
              "StatusCode": "404",
            },
            "Type": "fixed-response",
          },
        ],
        "LoadBalancerArn": Object {
          "Ref": "Alb",
        },
        "Port": 80,
        "Protocol": "HTTP",
      },
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
    },
    "AlbHttpsInternalListener": Object {
      "Properties": Object {
        "Certificates": Array [
          Object {
            "CertificateArn": Object {
              "Ref": "referencetoCosGalSysCertificateCertificateRequestorResourceA8D7E5EEArn",
            },
          },
        ],
        "DefaultActions": Array [
          Object {
            "FixedResponseConfig": Object {
              "ContentType": "text/plain",
              "MessageBody": "Route Not Found.",
              "StatusCode": "404",
            },
            "Type": "fixed-response",
          },
        ],
        "LoadBalancerArn": Object {
          "Ref": "Alb",
        },
        "Port": 8443,
        "Protocol": "HTTPS",
      },
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
    },
    "AlbHttpsListener": Object {
      "Properties": Object {
        "Certificates": Array [
          Object {
            "CertificateArn": Object {
              "Ref": "referencetoCosGalSysCertificateCertificateRequestorResourceA8D7E5EEArn",
            },
          },
        ],
        "DefaultActions": Array [
          Object {
            "FixedResponseConfig": Object {
              "ContentType": "text/plain",
              "MessageBody": "Route Not Found.",
              "StatusCode": "404",
            },
            "Type": "fixed-response",
          },
        ],
        "LoadBalancerArn": Object {
          "Ref": "Alb",
        },
        "Port": 443,
        "Protocol": "HTTPS",
      },
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
    },
    "AlbRecord": Object {
      "Properties": Object {
        "AliasTarget": Object {
          "DNSName": Object {
            "Fn::Join": Array [
              "",
              Array [
                "dualstack.",
                Object {
                  "Fn::GetAtt": Array [
                    "Alb",
                    "DNSName",
                  ],
                },
              ],
            ],
          },
          "HostedZoneId": Object {
            "Fn::GetAtt": Array [
              "Alb",
              "CanonicalHostedZoneID",
            ],
          },
        },
        "HostedZoneId": Object {
          "Ref": "referencetoCosGalSysZone702627E2Ref",
        },
        "Name": "sys.cos.com.",
        "Type": "A",
      },
      "Type": "AWS::Route53::RecordSet",
    },
    "AlbSecurityGroup": Object {
      "Properties": Object {
        "GroupDescription": "SecurityGroup for ALB.",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "SecurityGroupIngress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "from 0.0.0.0/0:80",
            "FromPort": 80,
            "IpProtocol": "tcp",
            "ToPort": 80,
          },
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "from 0.0.0.0/0:8080",
            "FromPort": 8080,
            "IpProtocol": "tcp",
            "ToPort": 8080,
          },
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "from 0.0.0.0/0:443",
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443,
          },
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "from 0.0.0.0/0:8443",
            "FromPort": 8443,
            "IpProtocol": "tcp",
            "ToPort": 8443,
          },
        ],
        "Tags": Array [
          Object {
            "Key": "cosmos",
            "Value": "Cos",
          },
          Object {
            "Key": "cosmos:feature",
            "Value": "Ecs",
          },
          Object {
            "Key": "cosmos:galaxy",
            "Value": "Gal",
          },
          Object {
            "Key": "cosmos:solarsystem",
            "Value": "Sys",
          },
        ],
        "VpcId": Object {
          "Fn::ImportValue": "CoreCosGalGalaxy:GalExportsOutputFnGetAttSharedVpcOutputsCosGalSharedVpcEA1B9578Ref35210733",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "Cluster": Object {
      "Properties": Object {
        "ClusterName": "CoreGalSysCluster",
        "ClusterSettings": Array [
          Object {
            "Name": "containerInsights",
            "Value": "enabled",
          },
        ],
        "Tags": Array [
          Object {
            "Key": "cosmos",
            "Value": "Cos",
          },
          Object {
            "Key": "cosmos:feature",
            "Value": "Ecs",
          },
          Object {
            "Key": "cosmos:galaxy",
            "Value": "Gal",
          },
          Object {
            "Key": "cosmos:solarsystem",
            "Value": "Sys",
          },
        ],
      },
      "Type": "AWS::ECS::Cluster",
    },
    "ClusterDefaultAutoScalingGroupASG": Object {
      "Properties": Object {
        "LaunchConfigurationName": Object {
          "Ref": "ClusterDefaultAutoScalingGroupLaunchConfig",
        },
        "MaxSize": "4",
        "MinSize": "1",
        "Tags": Array [
          Object {
            "Key": "cosmos",
            "PropagateAtLaunch": true,
            "Value": "Cos",
          },
          Object {
            "Key": "cosmos:feature",
            "PropagateAtLaunch": true,
            "Value": "Ecs",
          },
          Object {
            "Key": "cosmos:galaxy",
            "PropagateAtLaunch": true,
            "Value": "Gal",
          },
          Object {
            "Key": "cosmos:solarsystem",
            "PropagateAtLaunch": true,
            "Value": "Sys",
          },
          Object {
            "Key": "Name",
            "PropagateAtLaunch": true,
            "Value": "Cos/Gal/Sys/Ecs/Cluster/DefaultAutoScalingGroup",
          },
        ],
        "VPCZoneIdentifier": Array [
          Object {
            "Fn::ImportValue": "CoreCosGalGalaxy:GalExportsOutputFnGetAttSharedVpcOutputsCosGalSharedVpcAppSubnet1Subnet4ACE937ERefB0DC012F",
          },
          Object {
            "Fn::ImportValue": "CoreCosGalGalaxy:GalExportsOutputFnGetAttSharedVpcOutputsCosGalSharedVpcAppSubnet2Subnet0D4DDC84RefB858A527",
          },
        ],
      },
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "UpdatePolicy": Object {
        "AutoScalingRollingUpdate": Object {
          "PauseTime": "PT0S",
          "SuspendProcesses": Array [
            "HealthCheck",
            "ReplaceUnhealthy",
            "AZRebalance",
            "AlarmNotification",
            "ScheduledActions",
          ],
          "WaitOnResourceSignals": false,
        },
        "AutoScalingScheduledAction": Object {
          "IgnoreUnmodifiedGroupSizeProperties": true,
        },
      },
    },
    "ClusterDefaultAutoScalingGroupDrainECSHookFunction": Object {
      "DependsOn": Array [
        "ClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRoleDefaultPolicy",
        "ClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRole",
      ],
      "Properties": Object {
        "Code": Object {
          "ZipFile": "import boto3, json, os, time

ecs = boto3.client('ecs')
autoscaling = boto3.client('autoscaling')


def lambda_handler(event, context):
  print(json.dumps(event))
  cluster = os.environ['CLUSTER']
  snsTopicArn = event['Records'][0]['Sns']['TopicArn']
  lifecycle_event = json.loads(event['Records'][0]['Sns']['Message'])
  instance_id = lifecycle_event.get('EC2InstanceId')
  if not instance_id:
    print('Got event without EC2InstanceId: %s', json.dumps(event))
    return

  instance_arn = container_instance_arn(cluster, instance_id)
  print('Instance %s has container instance ARN %s' % (lifecycle_event['EC2InstanceId'], instance_arn))

  if not instance_arn:
    return

  while has_tasks(cluster, instance_arn):
    time.sleep(10)

  try:
    print('Terminating instance %s' % instance_id)
    autoscaling.complete_lifecycle_action(
        LifecycleActionResult='CONTINUE',
        **pick(lifecycle_event, 'LifecycleHookName', 'LifecycleActionToken', 'AutoScalingGroupName'))
  except Exception as e:
    # Lifecycle action may have already completed.
    print(str(e))


def container_instance_arn(cluster, instance_id):
  \\"\\"\\"Turn an instance ID into a container instance ARN.\\"\\"\\"
  arns = ecs.list_container_instances(cluster=cluster, filter='ec2InstanceId==' + instance_id)['containerInstanceArns']
  if not arns:
    return None
  return arns[0]


def has_tasks(cluster, instance_arn):
  \\"\\"\\"Return True if the instance is running tasks for the given cluster.\\"\\"\\"
  instances = ecs.describe_container_instances(cluster=cluster, containerInstances=[instance_arn])['containerInstances']
  if not instances:
    return False
  instance = instances[0]

  if instance['status'] == 'ACTIVE':
    # Start draining, then try again later
    set_container_instance_to_draining(cluster, instance_arn)
    return True

  tasks = instance['runningTasksCount'] + instance['pendingTasksCount']
  print('Instance %s has %s tasks' % (instance_arn, tasks))

  return tasks > 0


def set_container_instance_to_draining(cluster, instance_arn):
  ecs.update_container_instances_state(
      cluster=cluster,
      containerInstances=[instance_arn], status='DRAINING')


def pick(dct, *keys):
  \\"\\"\\"Pick a subset of a dict.\\"\\"\\"
  return {k: v for k, v in dct.items() if k in keys}
",
        },
        "Environment": Object {
          "Variables": Object {
            "CLUSTER": Object {
              "Ref": "Cluster",
            },
          },
        },
        "Handler": "index.lambda_handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "ClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRole",
            "Arn",
          ],
        },
        "Runtime": "python3.6",
        "Tags": Array [
          Object {
            "Key": "cosmos",
            "Value": "Cos",
          },
          Object {
            "Key": "cosmos:feature",
            "Value": "Ecs",
          },
          Object {
            "Key": "cosmos:galaxy",
            "Value": "Gal",
          },
          Object {
            "Key": "cosmos:solarsystem",
            "Value": "Sys",
          },
          Object {
            "Key": "Name",
            "Value": "Cos/Gal/Sys/Ecs/Cluster/DefaultAutoScalingGroup",
          },
        ],
        "Timeout": 310,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ClusterDefaultAutoScalingGroupDrainECSHookFunctionAllowInvokeCosGalSysEcsClusterDefaultAutoScalingGroupLifecycleHookDrainHookTopic4E49EAF2": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "ClusterDefaultAutoScalingGroupDrainECSHookFunction",
            "Arn",
          ],
        },
        "Principal": "sns.amazonaws.com",
        "SourceArn": Object {
          "Ref": "ClusterDefaultAutoScalingGroupLifecycleHookDrainHookTopic",
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRole": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
        "Tags": Array [
          Object {
            "Key": "cosmos",
            "Value": "Cos",
          },
          Object {
            "Key": "cosmos:feature",
            "Value": "Ecs",
          },
          Object {
            "Key": "cosmos:galaxy",
            "Value": "Gal",
          },
          Object {
            "Key": "cosmos:solarsystem",
            "Value": "Sys",
          },
          Object {
            "Key": "Name",
            "Value": "Cos/Gal/Sys/Ecs/Cluster/DefaultAutoScalingGroup",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRoleDefaultPolicy": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "ec2:DescribeInstances",
                "ec2:DescribeInstanceAttribute",
                "ec2:DescribeInstanceStatus",
                "ec2:DescribeHosts",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "autoscaling:CompleteLifecycleAction",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":autoscaling:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":autoScalingGroup:*:autoScalingGroupName/",
                    Object {
                      "Ref": "ClusterDefaultAutoScalingGroupASG",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "ecs:DescribeContainerInstances",
                "ecs:DescribeTasks",
              ],
              "Condition": Object {
                "ArnEquals": Object {
                  "ecs:cluster": Object {
                    "Fn::GetAtt": Array [
                      "Cluster",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "ecs:ListContainerInstances",
                "ecs:SubmitContainerStateChange",
                "ecs:SubmitTaskStateChange",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "Cluster",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "ecs:UpdateContainerInstancesState",
                "ecs:ListTasks",
              ],
              "Condition": Object {
                "ArnEquals": Object {
                  "ecs:cluster": Object {
                    "Fn::GetAtt": Array [
                      "Cluster",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRoleDefaultPolicy",
        "Roles": Array [
          Object {
            "Ref": "ClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRole",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ClusterDefaultAutoScalingGroupDrainECSHookFunctionTopic": Object {
      "Properties": Object {
        "Endpoint": Object {
          "Fn::GetAtt": Array [
            "ClusterDefaultAutoScalingGroupDrainECSHookFunction",
            "Arn",
          ],
        },
        "Protocol": "lambda",
        "TopicArn": Object {
          "Ref": "ClusterDefaultAutoScalingGroupLifecycleHookDrainHookTopic",
        },
      },
      "Type": "AWS::SNS::Subscription",
    },
    "ClusterDefaultAutoScalingGroupInstanceProfile": Object {
      "Properties": Object {
        "Roles": Array [
          Object {
            "Ref": "ClusterDefaultAutoScalingGroupInstanceRole",
          },
        ],
      },
      "Type": "AWS::IAM::InstanceProfile",
    },
    "ClusterDefaultAutoScalingGroupInstanceRole": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "ec2.",
                      Object {
                        "Ref": "AWS::URLSuffix",
                      },
                    ],
                  ],
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AmazonSSMFullAccess",
              ],
            ],
          },
        ],
        "Tags": Array [
          Object {
            "Key": "cosmos",
            "Value": "Cos",
          },
          Object {
            "Key": "cosmos:feature",
            "Value": "Ecs",
          },
          Object {
            "Key": "cosmos:galaxy",
            "Value": "Gal",
          },
          Object {
            "Key": "cosmos:solarsystem",
            "Value": "Sys",
          },
          Object {
            "Key": "Name",
            "Value": "Cos/Gal/Sys/Ecs/Cluster/DefaultAutoScalingGroup",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ClusterDefaultAutoScalingGroupInstanceRoleDefaultPolicy": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "ecs:DeregisterContainerInstance",
                "ecs:RegisterContainerInstance",
                "ecs:Submit*",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "Cluster",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "ecs:Poll",
                "ecs:StartTelemetrySession",
              ],
              "Condition": Object {
                "ArnEquals": Object {
                  "ecs:cluster": Object {
                    "Fn::GetAtt": Array [
                      "Cluster",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "ecs:DiscoverPollEndpoint",
                "ecr:GetAuthorizationToken",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ClusterDefaultAutoScalingGroupInstanceRoleDefaultPolicy",
        "Roles": Array [
          Object {
            "Ref": "ClusterDefaultAutoScalingGroupInstanceRole",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ClusterDefaultAutoScalingGroupInstanceSecurityGroup": Object {
      "Properties": Object {
        "GroupDescription": "Cos/Gal/Sys/Ecs/Cluster/DefaultAutoScalingGroup/InstanceSecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "Tags": Array [
          Object {
            "Key": "cosmos",
            "Value": "Cos",
          },
          Object {
            "Key": "cosmos:feature",
            "Value": "Ecs",
          },
          Object {
            "Key": "cosmos:galaxy",
            "Value": "Gal",
          },
          Object {
            "Key": "cosmos:solarsystem",
            "Value": "Sys",
          },
          Object {
            "Key": "Name",
            "Value": "Cos/Gal/Sys/Ecs/Cluster/DefaultAutoScalingGroup",
          },
        ],
        "VpcId": Object {
          "Fn::ImportValue": "CoreCosGalGalaxy:GalExportsOutputFnGetAttSharedVpcOutputsCosGalSharedVpcEA1B9578Ref35210733",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "ClusterDefaultAutoScalingGroupLaunchConfig": Object {
      "DependsOn": Array [
        "ClusterDefaultAutoScalingGroupInstanceRoleDefaultPolicy",
        "ClusterDefaultAutoScalingGroupInstanceRole",
      ],
      "Properties": Object {
        "IamInstanceProfile": Object {
          "Ref": "ClusterDefaultAutoScalingGroupInstanceProfile",
        },
        "ImageId": Object {
          "Ref": "SsmParameterValueawsserviceecsoptimizedamiamazonlinux2recommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter",
        },
        "InstanceType": "t3.medium",
        "SecurityGroups": Array [
          Object {
            "Fn::GetAtt": Array [
              "ClusterDefaultAutoScalingGroupInstanceSecurityGroup",
              "GroupId",
            ],
          },
        ],
        "UserData": Object {
          "Fn::Base64": Object {
            "Fn::Join": Array [
              "",
              Array [
                "#!/bin/bash
exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
echo ECS_CLUSTER=",
                Object {
                  "Ref": "Cluster",
                },
                " >> /etc/ecs/ecs.config
sudo iptables --insert FORWARD 1 --in-interface docker+ --destination 169.254.169.254/32 --jump DROP
sudo service iptables save
echo ECS_AWSVPC_BLOCK_IMDS=true >> /etc/ecs/ecs.config",
              ],
            ],
          },
        },
      },
      "Type": "AWS::AutoScaling::LaunchConfiguration",
    },
    "ClusterDefaultAutoScalingGroupLifecycleHookDrainHook": Object {
      "DependsOn": Array [
        "ClusterDefaultAutoScalingGroupLifecycleHookDrainHookRoleDefaultPolicy",
        "ClusterDefaultAutoScalingGroupLifecycleHookDrainHookRole",
      ],
      "Properties": Object {
        "AutoScalingGroupName": Object {
          "Ref": "ClusterDefaultAutoScalingGroupASG",
        },
        "DefaultResult": "CONTINUE",
        "HeartbeatTimeout": 300,
        "LifecycleTransition": "autoscaling:EC2_INSTANCE_TERMINATING",
        "NotificationTargetARN": Object {
          "Ref": "ClusterDefaultAutoScalingGroupLifecycleHookDrainHookTopic",
        },
        "RoleARN": Object {
          "Fn::GetAtt": Array [
            "ClusterDefaultAutoScalingGroupLifecycleHookDrainHookRole",
            "Arn",
          ],
        },
      },
      "Type": "AWS::AutoScaling::LifecycleHook",
    },
    "ClusterDefaultAutoScalingGroupLifecycleHookDrainHookRole": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "autoscaling.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": Array [
          Object {
            "Key": "cosmos",
            "Value": "Cos",
          },
          Object {
            "Key": "cosmos:feature",
            "Value": "Ecs",
          },
          Object {
            "Key": "cosmos:galaxy",
            "Value": "Gal",
          },
          Object {
            "Key": "cosmos:solarsystem",
            "Value": "Sys",
          },
          Object {
            "Key": "Name",
            "Value": "Cos/Gal/Sys/Ecs/Cluster/DefaultAutoScalingGroup",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ClusterDefaultAutoScalingGroupLifecycleHookDrainHookRoleDefaultPolicy": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "kms:Decrypt",
                "kms:GenerateDataKey",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::ImportValue": "CoreCosGalGalaxy:GalExportsOutputFnGetAttSharedKeyArn962CB6B9",
              },
            },
            Object {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "ClusterDefaultAutoScalingGroupLifecycleHookDrainHookTopic",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ClusterDefaultAutoScalingGroupLifecycleHookDrainHookRoleDefaultPolicy",
        "Roles": Array [
          Object {
            "Ref": "ClusterDefaultAutoScalingGroupLifecycleHookDrainHookRole",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ClusterDefaultAutoScalingGroupLifecycleHookDrainHookTopic": Object {
      "Properties": Object {
        "KmsMasterKeyId": Object {
          "Fn::ImportValue": "CoreCosGalGalaxy:GalExportsOutputFnGetAttSharedKeyArn962CB6B9",
        },
        "Tags": Array [
          Object {
            "Key": "cosmos",
            "Value": "Cos",
          },
          Object {
            "Key": "cosmos:feature",
            "Value": "Ecs",
          },
          Object {
            "Key": "cosmos:galaxy",
            "Value": "Gal",
          },
          Object {
            "Key": "cosmos:solarsystem",
            "Value": "Sys",
          },
          Object {
            "Key": "Name",
            "Value": "Cos/Gal/Sys/Ecs/Cluster/DefaultAutoScalingGroup",
          },
        ],
      },
      "Type": "AWS::SNS::Topic",
    },
  },
}
`;

exports[`ECS Feature should match snapshot 3`] = `
Object {
  "Description": "Cosmos SolarSystem: Resources dependant on each App Env, like Vpc and MainZone.",
  "Outputs": Object {
    "PrivateZoneZoneId": Object {
      "Export": Object {
        "Name": "CoreGalSys1PrivateZoneId",
      },
      "Value": Object {
        "Ref": "PrivateZone",
      },
    },
    "PrivateZoneZoneName": Object {
      "Export": Object {
        "Name": "CoreGalSys1PrivateZoneName",
      },
      "Value": "sys1.internal",
    },
    "VpcAZs": Object {
      "Export": Object {
        "Name": "CoreGalSys1VpcAZs",
      },
      "Value": Object {
        "Fn::Join": Array [
          ",",
          Array [
            Object {
              "Fn::Select": Array [
                0,
                Object {
                  "Fn::GetAZs": "",
                },
              ],
            },
            Object {
              "Fn::Select": Array [
                1,
                Object {
                  "Fn::GetAZs": "",
                },
              ],
            },
          ],
        ],
      },
    },
    "VpcCidrBlock": Object {
      "Export": Object {
        "Name": "CoreGalSys1VpcCidrBlock",
      },
      "Value": Object {
        "Fn::ImportValue": "CoreCosGalGalaxy:GalExportsOutputFnGetAttSharedVpcOutputsCosGalSharedVpcEA1B9578CidrBlockF3542C65",
      },
    },
    "VpcId": Object {
      "Export": Object {
        "Name": "CoreGalSys1VpcId",
      },
      "Value": Object {
        "Fn::ImportValue": "CoreCosGalGalaxy:GalExportsOutputFnGetAttSharedVpcOutputsCosGalSharedVpcEA1B9578Ref35210733",
      },
    },
    "VpcIsolatedSubnetRouteTables": Object {
      "Export": Object {
        "Name": "CoreGalSys1VpcIsolatedSubnetRouteTableIds",
      },
      "Value": Object {
        "Fn::Join": Array [
          ",",
          Array [
            Object {
              "Fn::ImportValue": "CoreCosGalGalaxy:GalExportsOutputFnGetAttSharedVpcOutputsCosGalSharedVpcAppSubnet1RouteTable688214BDRefC3174DB1",
            },
            Object {
              "Fn::ImportValue": "CoreCosGalGalaxy:GalExportsOutputFnGetAttSharedVpcOutputsCosGalSharedVpcAppSubnet2RouteTable4054ECB4Ref27E06E84",
            },
          ],
        ],
      },
    },
    "VpcIsolatedSubnets": Object {
      "Export": Object {
        "Name": "CoreGalSys1VpcIsolatedSubnetIds",
      },
      "Value": Object {
        "Fn::Join": Array [
          ",",
          Array [
            Object {
              "Fn::ImportValue": "CoreCosGalGalaxy:GalExportsOutputFnGetAttSharedVpcOutputsCosGalSharedVpcAppSubnet1Subnet4ACE937ERefB0DC012F",
            },
            Object {
              "Fn::ImportValue": "CoreCosGalGalaxy:GalExportsOutputFnGetAttSharedVpcOutputsCosGalSharedVpcAppSubnet2Subnet0D4DDC84RefB858A527",
            },
          ],
        ],
      },
    },
    "ZoneId": Object {
      "Export": Object {
        "Name": "CoreGalSys1ZoneId",
      },
      "Value": Object {
        "Ref": "Zone",
      },
    },
    "ZoneName": Object {
      "Export": Object {
        "Name": "CoreGalSys1ZoneName",
      },
      "Value": "sys1.cos.com",
    },
    "ZoneNameServers": Object {
      "Export": Object {
        "Name": "CoreGalSys1ZoneNameServers",
      },
      "Value": Object {
        "Fn::Join": Array [
          ",",
          Object {
            "Fn::GetAtt": Array [
              "Zone",
              "NameServers",
            ],
          },
        ],
      },
    },
  },
  "Parameters": Object {
    "AssetParameters8e7f760c3e520d6011ba39e3ffdf91291319d8c9173bdaa966b0f26af29fc437ArtifactHash": Object {
      "Description": "Artifact hash for asset \\"8e7f760c3e520d6011ba39e3ffdf91291319d8c9173bdaa966b0f26af29fc437\\"",
      "Type": "String",
    },
    "AssetParameters8e7f760c3e520d6011ba39e3ffdf91291319d8c9173bdaa966b0f26af29fc437S3Bucket": Object {
      "Description": "S3 bucket for asset \\"8e7f760c3e520d6011ba39e3ffdf91291319d8c9173bdaa966b0f26af29fc437\\"",
      "Type": "String",
    },
    "AssetParameters8e7f760c3e520d6011ba39e3ffdf91291319d8c9173bdaa966b0f26af29fc437S3VersionKey": Object {
      "Description": "S3 key for asset version \\"8e7f760c3e520d6011ba39e3ffdf91291319d8c9173bdaa966b0f26af29fc437\\"",
      "Type": "String",
    },
  },
  "Resources": Object {
    "Ecs": Object {
      "Properties": Object {
        "Parameters": Object {
          "referencetoCosGalSys1ZoneD618DEF9Ref": Object {
            "Ref": "Zone",
          },
        },
        "Tags": Array [
          Object {
            "Key": "cosmos",
            "Value": "Cos",
          },
          Object {
            "Key": "cosmos:galaxy",
            "Value": "Gal",
          },
          Object {
            "Key": "cosmos:solarsystem",
            "Value": "Sys1",
          },
        ],
        "TemplateURL": Object {
          "Fn::Join": Array [
            "",
            Array [
              "https://s3.",
              Object {
                "Ref": "AWS::Region",
              },
              ".",
              Object {
                "Ref": "AWS::URLSuffix",
              },
              "/",
              Object {
                "Ref": "AssetParameters8e7f760c3e520d6011ba39e3ffdf91291319d8c9173bdaa966b0f26af29fc437S3Bucket",
              },
              "/",
              Object {
                "Fn::Select": Array [
                  0,
                  Object {
                    "Fn::Split": Array [
                      "||",
                      Object {
                        "Ref": "AssetParameters8e7f760c3e520d6011ba39e3ffdf91291319d8c9173bdaa966b0f26af29fc437S3VersionKey",
                      },
                    ],
                  },
                ],
              },
              Object {
                "Fn::Select": Array [
                  1,
                  Object {
                    "Fn::Split": Array [
                      "||",
                      Object {
                        "Ref": "AssetParameters8e7f760c3e520d6011ba39e3ffdf91291319d8c9173bdaa966b0f26af29fc437S3VersionKey",
                      },
                    ],
                  },
                ],
              },
            ],
          ],
        },
      },
      "Type": "AWS::CloudFormation::Stack",
    },
    "PrivateZone": Object {
      "Properties": Object {
        "HostedZoneConfig": Object {
          "Comment": "Core Main Private Zone for Sys1 SolarSystem",
        },
        "HostedZoneTags": Array [
          Object {
            "Key": "cosmos",
            "Value": "Cos",
          },
          Object {
            "Key": "cosmos:galaxy",
            "Value": "Gal",
          },
          Object {
            "Key": "cosmos:solarsystem",
            "Value": "Sys1",
          },
        ],
        "Name": "sys1.internal.",
        "VPCs": Array [
          Object {
            "VPCId": Object {
              "Fn::ImportValue": "CoreCosGalGalaxy:GalExportsOutputFnGetAttSharedVpcOutputsCosGalSharedVpcEA1B9578Ref35210733",
            },
            "VPCRegion": Object {
              "Ref": "AWS::Region",
            },
          },
        ],
      },
      "Type": "AWS::Route53::HostedZone",
    },
    "Zone": Object {
      "Properties": Object {
        "HostedZoneConfig": Object {
          "Comment": "Core Main Zone for Sys1 SolarSystem",
        },
        "HostedZoneTags": Array [
          Object {
            "Key": "cosmos",
            "Value": "Cos",
          },
          Object {
            "Key": "cosmos:galaxy",
            "Value": "Gal",
          },
          Object {
            "Key": "cosmos:solarsystem",
            "Value": "Sys1",
          },
        ],
        "Name": "sys1.cos.com.",
      },
      "Type": "AWS::Route53::HostedZone",
    },
    "ZoneDelegation": Object {
      "Properties": Object {
        "Comment": "Core Zone Delegation for Sys1 SolarSystem.",
        "HostedZoneId": Object {
          "Fn::ImportValue": "CoreCosCosmos:ExportsOutputRefRootZone2F3E9CEF",
        },
        "Name": "sys1.cos.com.",
        "ResourceRecords": Object {
          "Fn::GetAtt": Array [
            "Zone",
            "NameServers",
          ],
        },
        "TTL": "1800",
        "Type": "NS",
      },
      "Type": "AWS::Route53::RecordSet",
    },
  },
}
`;

exports[`ECS Feature should match snapshot 4`] = `
Object {
  "Description": "Adds Ecs Features to the SolarSystem",
  "Outputs": Object {
    "AlbArn": Object {
      "Export": Object {
        "Name": "CoreGalSys1AlbArn",
      },
      "Value": Object {
        "Ref": "Alb",
      },
    },
    "AlbDnsHostZoneId": Object {
      "Export": Object {
        "Name": "CoreGalSys1AlbDnsHostZoneId",
      },
      "Value": Object {
        "Fn::GetAtt": Array [
          "Alb",
          "CanonicalHostedZoneID",
        ],
      },
    },
    "AlbDnsName": Object {
      "Export": Object {
        "Name": "CoreGalSys1AlbDnsName",
      },
      "Value": Object {
        "Fn::GetAtt": Array [
          "Alb",
          "DNSName",
        ],
      },
    },
    "AlbHttpInternalListenerAlArn": Object {
      "Export": Object {
        "Name": "CoreGalSys1HttpInternalListenerArn",
      },
      "Value": Object {
        "Ref": "AlbHttpInternalListener",
      },
    },
    "AlbHttpInternalListenerAlSecurityGroupId": Object {
      "Export": Object {
        "Name": "CoreGalSys1HttpInternalListenerSecurityGroupId",
      },
      "Value": Object {
        "Fn::GetAtt": Array [
          "AlbSecurityGroup",
          "GroupId",
        ],
      },
    },
    "AlbHttpListenerAlArn": Object {
      "Export": Object {
        "Name": "CoreGalSys1HttpListenerArn",
      },
      "Value": Object {
        "Ref": "AlbHttpListener",
      },
    },
    "AlbHttpListenerAlSecurityGroupId": Object {
      "Export": Object {
        "Name": "CoreGalSys1HttpListenerSecurityGroupId",
      },
      "Value": Object {
        "Fn::GetAtt": Array [
          "AlbSecurityGroup",
          "GroupId",
        ],
      },
    },
    "AlbSecurityGroupId": Object {
      "Export": Object {
        "Name": "CoreGalSys1AlbSecurityGroupId",
      },
      "Value": Object {
        "Fn::GetAtt": Array [
          "AlbSecurityGroup",
          "GroupId",
        ],
      },
    },
    "ClusterName": Object {
      "Export": Object {
        "Name": "CoreGalSys1ClusterName",
      },
      "Value": Object {
        "Ref": "Cluster",
      },
    },
    "ClusterSecurityGroup": Object {
      "Export": Object {
        "Name": "CoreGalSys1ClusterSecurityGroup",
      },
      "Value": Object {
        "Fn::GetAtt": Array [
          "ClusterDefaultAutoScalingGroupInstanceSecurityGroup",
          "GroupId",
        ],
      },
    },
  },
  "Parameters": Object {
    "SsmParameterValueawsserviceecsoptimizedamiamazonlinux2recommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter": Object {
      "Default": "/aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id",
      "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
    },
    "referencetoCosGalSys1ZoneD618DEF9Ref": Object {
      "Type": "String",
    },
  },
  "Resources": Object {
    "Alb": Object {
      "Properties": Object {
        "LoadBalancerAttributes": Array [
          Object {
            "Key": "deletion_protection.enabled",
            "Value": "false",
          },
        ],
        "Name": "CoreGalSys1Alb",
        "Scheme": "internal",
        "SecurityGroups": Array [
          Object {
            "Fn::GetAtt": Array [
              "AlbSecurityGroup",
              "GroupId",
            ],
          },
        ],
        "Subnets": Array [
          Object {
            "Fn::ImportValue": "CoreCosGalGalaxy:GalExportsOutputFnGetAttSharedVpcOutputsCosGalSharedVpcAppSubnet1Subnet4ACE937ERefB0DC012F",
          },
          Object {
            "Fn::ImportValue": "CoreCosGalGalaxy:GalExportsOutputFnGetAttSharedVpcOutputsCosGalSharedVpcAppSubnet2Subnet0D4DDC84RefB858A527",
          },
        ],
        "Tags": Array [
          Object {
            "Key": "cosmos",
            "Value": "Cos",
          },
          Object {
            "Key": "cosmos:feature",
            "Value": "Ecs",
          },
          Object {
            "Key": "cosmos:galaxy",
            "Value": "Gal",
          },
          Object {
            "Key": "cosmos:solarsystem",
            "Value": "Sys1",
          },
        ],
        "Type": "application",
      },
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
    },
    "AlbHttpInternalListener": Object {
      "Properties": Object {
        "DefaultActions": Array [
          Object {
            "FixedResponseConfig": Object {
              "ContentType": "text/plain",
              "MessageBody": "Route Not Found.",
              "StatusCode": "404",
            },
            "Type": "fixed-response",
          },
        ],
        "LoadBalancerArn": Object {
          "Ref": "Alb",
        },
        "Port": 8080,
        "Protocol": "HTTP",
      },
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
    },
    "AlbHttpListener": Object {
      "Properties": Object {
        "DefaultActions": Array [
          Object {
            "FixedResponseConfig": Object {
              "ContentType": "text/plain",
              "MessageBody": "Route Not Found.",
              "StatusCode": "404",
            },
            "Type": "fixed-response",
          },
        ],
        "LoadBalancerArn": Object {
          "Ref": "Alb",
        },
        "Port": 80,
        "Protocol": "HTTP",
      },
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
    },
    "AlbRecord": Object {
      "Properties": Object {
        "AliasTarget": Object {
          "DNSName": Object {
            "Fn::Join": Array [
              "",
              Array [
                "dualstack.",
                Object {
                  "Fn::GetAtt": Array [
                    "Alb",
                    "DNSName",
                  ],
                },
              ],
            ],
          },
          "HostedZoneId": Object {
            "Fn::GetAtt": Array [
              "Alb",
              "CanonicalHostedZoneID",
            ],
          },
        },
        "HostedZoneId": Object {
          "Ref": "referencetoCosGalSys1ZoneD618DEF9Ref",
        },
        "Name": "sys1.cos.com.",
        "Type": "A",
      },
      "Type": "AWS::Route53::RecordSet",
    },
    "AlbSecurityGroup": Object {
      "Properties": Object {
        "GroupDescription": "SecurityGroup for ALB.",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "SecurityGroupIngress": Array [
          Object {
            "CidrIp": "10.0.0.0/8",
            "Description": "from 10.0.0.0/8:80",
            "FromPort": 80,
            "IpProtocol": "tcp",
            "ToPort": 80,
          },
          Object {
            "CidrIp": "10.0.0.0/8",
            "Description": "from 10.0.0.0/8:8080",
            "FromPort": 8080,
            "IpProtocol": "tcp",
            "ToPort": 8080,
          },
        ],
        "Tags": Array [
          Object {
            "Key": "cosmos",
            "Value": "Cos",
          },
          Object {
            "Key": "cosmos:feature",
            "Value": "Ecs",
          },
          Object {
            "Key": "cosmos:galaxy",
            "Value": "Gal",
          },
          Object {
            "Key": "cosmos:solarsystem",
            "Value": "Sys1",
          },
        ],
        "VpcId": Object {
          "Fn::ImportValue": "CoreCosGalGalaxy:GalExportsOutputFnGetAttSharedVpcOutputsCosGalSharedVpcEA1B9578Ref35210733",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "Cluster": Object {
      "Properties": Object {
        "ClusterName": "CoreGalSys1Cluster",
        "ClusterSettings": Array [
          Object {
            "Name": "containerInsights",
            "Value": "enabled",
          },
        ],
        "Tags": Array [
          Object {
            "Key": "cosmos",
            "Value": "Cos",
          },
          Object {
            "Key": "cosmos:feature",
            "Value": "Ecs",
          },
          Object {
            "Key": "cosmos:galaxy",
            "Value": "Gal",
          },
          Object {
            "Key": "cosmos:solarsystem",
            "Value": "Sys1",
          },
        ],
      },
      "Type": "AWS::ECS::Cluster",
    },
    "ClusterDefaultAutoScalingGroupASG": Object {
      "Properties": Object {
        "LaunchConfigurationName": Object {
          "Ref": "ClusterDefaultAutoScalingGroupLaunchConfig",
        },
        "MaxSize": "4",
        "MinSize": "1",
        "Tags": Array [
          Object {
            "Key": "cosmos",
            "PropagateAtLaunch": true,
            "Value": "Cos",
          },
          Object {
            "Key": "cosmos:feature",
            "PropagateAtLaunch": true,
            "Value": "Ecs",
          },
          Object {
            "Key": "cosmos:galaxy",
            "PropagateAtLaunch": true,
            "Value": "Gal",
          },
          Object {
            "Key": "cosmos:solarsystem",
            "PropagateAtLaunch": true,
            "Value": "Sys1",
          },
          Object {
            "Key": "Name",
            "PropagateAtLaunch": true,
            "Value": "Cos/Gal/Sys1/Ecs/Cluster/DefaultAutoScalingGroup",
          },
        ],
        "VPCZoneIdentifier": Array [
          Object {
            "Fn::ImportValue": "CoreCosGalGalaxy:GalExportsOutputFnGetAttSharedVpcOutputsCosGalSharedVpcAppSubnet1Subnet4ACE937ERefB0DC012F",
          },
          Object {
            "Fn::ImportValue": "CoreCosGalGalaxy:GalExportsOutputFnGetAttSharedVpcOutputsCosGalSharedVpcAppSubnet2Subnet0D4DDC84RefB858A527",
          },
        ],
      },
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "UpdatePolicy": Object {
        "AutoScalingRollingUpdate": Object {
          "PauseTime": "PT0S",
          "SuspendProcesses": Array [
            "HealthCheck",
            "ReplaceUnhealthy",
            "AZRebalance",
            "AlarmNotification",
            "ScheduledActions",
          ],
          "WaitOnResourceSignals": false,
        },
        "AutoScalingScheduledAction": Object {
          "IgnoreUnmodifiedGroupSizeProperties": true,
        },
      },
    },
    "ClusterDefaultAutoScalingGroupDrainECSHookFunction": Object {
      "DependsOn": Array [
        "ClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRoleDefaultPolicy",
        "ClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRole",
      ],
      "Properties": Object {
        "Code": Object {
          "ZipFile": "import boto3, json, os, time

ecs = boto3.client('ecs')
autoscaling = boto3.client('autoscaling')


def lambda_handler(event, context):
  print(json.dumps(event))
  cluster = os.environ['CLUSTER']
  snsTopicArn = event['Records'][0]['Sns']['TopicArn']
  lifecycle_event = json.loads(event['Records'][0]['Sns']['Message'])
  instance_id = lifecycle_event.get('EC2InstanceId')
  if not instance_id:
    print('Got event without EC2InstanceId: %s', json.dumps(event))
    return

  instance_arn = container_instance_arn(cluster, instance_id)
  print('Instance %s has container instance ARN %s' % (lifecycle_event['EC2InstanceId'], instance_arn))

  if not instance_arn:
    return

  while has_tasks(cluster, instance_arn):
    time.sleep(10)

  try:
    print('Terminating instance %s' % instance_id)
    autoscaling.complete_lifecycle_action(
        LifecycleActionResult='CONTINUE',
        **pick(lifecycle_event, 'LifecycleHookName', 'LifecycleActionToken', 'AutoScalingGroupName'))
  except Exception as e:
    # Lifecycle action may have already completed.
    print(str(e))


def container_instance_arn(cluster, instance_id):
  \\"\\"\\"Turn an instance ID into a container instance ARN.\\"\\"\\"
  arns = ecs.list_container_instances(cluster=cluster, filter='ec2InstanceId==' + instance_id)['containerInstanceArns']
  if not arns:
    return None
  return arns[0]


def has_tasks(cluster, instance_arn):
  \\"\\"\\"Return True if the instance is running tasks for the given cluster.\\"\\"\\"
  instances = ecs.describe_container_instances(cluster=cluster, containerInstances=[instance_arn])['containerInstances']
  if not instances:
    return False
  instance = instances[0]

  if instance['status'] == 'ACTIVE':
    # Start draining, then try again later
    set_container_instance_to_draining(cluster, instance_arn)
    return True

  tasks = instance['runningTasksCount'] + instance['pendingTasksCount']
  print('Instance %s has %s tasks' % (instance_arn, tasks))

  return tasks > 0


def set_container_instance_to_draining(cluster, instance_arn):
  ecs.update_container_instances_state(
      cluster=cluster,
      containerInstances=[instance_arn], status='DRAINING')


def pick(dct, *keys):
  \\"\\"\\"Pick a subset of a dict.\\"\\"\\"
  return {k: v for k, v in dct.items() if k in keys}
",
        },
        "Environment": Object {
          "Variables": Object {
            "CLUSTER": Object {
              "Ref": "Cluster",
            },
          },
        },
        "Handler": "index.lambda_handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "ClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRole",
            "Arn",
          ],
        },
        "Runtime": "python3.6",
        "Tags": Array [
          Object {
            "Key": "cosmos",
            "Value": "Cos",
          },
          Object {
            "Key": "cosmos:feature",
            "Value": "Ecs",
          },
          Object {
            "Key": "cosmos:galaxy",
            "Value": "Gal",
          },
          Object {
            "Key": "cosmos:solarsystem",
            "Value": "Sys1",
          },
          Object {
            "Key": "Name",
            "Value": "Cos/Gal/Sys1/Ecs/Cluster/DefaultAutoScalingGroup",
          },
        ],
        "Timeout": 310,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ClusterDefaultAutoScalingGroupDrainECSHookFunctionAllowInvokeCosGalSys1EcsClusterDefaultAutoScalingGroupLifecycleHookDrainHookTopic29C1AC8A": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "ClusterDefaultAutoScalingGroupDrainECSHookFunction",
            "Arn",
          ],
        },
        "Principal": "sns.amazonaws.com",
        "SourceArn": Object {
          "Ref": "ClusterDefaultAutoScalingGroupLifecycleHookDrainHookTopic",
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRole": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
        "Tags": Array [
          Object {
            "Key": "cosmos",
            "Value": "Cos",
          },
          Object {
            "Key": "cosmos:feature",
            "Value": "Ecs",
          },
          Object {
            "Key": "cosmos:galaxy",
            "Value": "Gal",
          },
          Object {
            "Key": "cosmos:solarsystem",
            "Value": "Sys1",
          },
          Object {
            "Key": "Name",
            "Value": "Cos/Gal/Sys1/Ecs/Cluster/DefaultAutoScalingGroup",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRoleDefaultPolicy": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "ec2:DescribeInstances",
                "ec2:DescribeInstanceAttribute",
                "ec2:DescribeInstanceStatus",
                "ec2:DescribeHosts",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "autoscaling:CompleteLifecycleAction",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":autoscaling:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":autoScalingGroup:*:autoScalingGroupName/",
                    Object {
                      "Ref": "ClusterDefaultAutoScalingGroupASG",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "ecs:DescribeContainerInstances",
                "ecs:DescribeTasks",
              ],
              "Condition": Object {
                "ArnEquals": Object {
                  "ecs:cluster": Object {
                    "Fn::GetAtt": Array [
                      "Cluster",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "ecs:ListContainerInstances",
                "ecs:SubmitContainerStateChange",
                "ecs:SubmitTaskStateChange",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "Cluster",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "ecs:UpdateContainerInstancesState",
                "ecs:ListTasks",
              ],
              "Condition": Object {
                "ArnEquals": Object {
                  "ecs:cluster": Object {
                    "Fn::GetAtt": Array [
                      "Cluster",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRoleDefaultPolicy",
        "Roles": Array [
          Object {
            "Ref": "ClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRole",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ClusterDefaultAutoScalingGroupDrainECSHookFunctionTopic": Object {
      "Properties": Object {
        "Endpoint": Object {
          "Fn::GetAtt": Array [
            "ClusterDefaultAutoScalingGroupDrainECSHookFunction",
            "Arn",
          ],
        },
        "Protocol": "lambda",
        "TopicArn": Object {
          "Ref": "ClusterDefaultAutoScalingGroupLifecycleHookDrainHookTopic",
        },
      },
      "Type": "AWS::SNS::Subscription",
    },
    "ClusterDefaultAutoScalingGroupInstanceProfile": Object {
      "Properties": Object {
        "Roles": Array [
          Object {
            "Ref": "ClusterDefaultAutoScalingGroupInstanceRole",
          },
        ],
      },
      "Type": "AWS::IAM::InstanceProfile",
    },
    "ClusterDefaultAutoScalingGroupInstanceRole": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "ec2.",
                      Object {
                        "Ref": "AWS::URLSuffix",
                      },
                    ],
                  ],
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AmazonSSMFullAccess",
              ],
            ],
          },
        ],
        "Tags": Array [
          Object {
            "Key": "cosmos",
            "Value": "Cos",
          },
          Object {
            "Key": "cosmos:feature",
            "Value": "Ecs",
          },
          Object {
            "Key": "cosmos:galaxy",
            "Value": "Gal",
          },
          Object {
            "Key": "cosmos:solarsystem",
            "Value": "Sys1",
          },
          Object {
            "Key": "Name",
            "Value": "Cos/Gal/Sys1/Ecs/Cluster/DefaultAutoScalingGroup",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ClusterDefaultAutoScalingGroupInstanceRoleDefaultPolicy": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "ecs:DeregisterContainerInstance",
                "ecs:RegisterContainerInstance",
                "ecs:Submit*",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "Cluster",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "ecs:Poll",
                "ecs:StartTelemetrySession",
              ],
              "Condition": Object {
                "ArnEquals": Object {
                  "ecs:cluster": Object {
                    "Fn::GetAtt": Array [
                      "Cluster",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "ecs:DiscoverPollEndpoint",
                "ecr:GetAuthorizationToken",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ClusterDefaultAutoScalingGroupInstanceRoleDefaultPolicy",
        "Roles": Array [
          Object {
            "Ref": "ClusterDefaultAutoScalingGroupInstanceRole",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ClusterDefaultAutoScalingGroupInstanceSecurityGroup": Object {
      "Properties": Object {
        "GroupDescription": "Cos/Gal/Sys1/Ecs/Cluster/DefaultAutoScalingGroup/InstanceSecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "Tags": Array [
          Object {
            "Key": "cosmos",
            "Value": "Cos",
          },
          Object {
            "Key": "cosmos:feature",
            "Value": "Ecs",
          },
          Object {
            "Key": "cosmos:galaxy",
            "Value": "Gal",
          },
          Object {
            "Key": "cosmos:solarsystem",
            "Value": "Sys1",
          },
          Object {
            "Key": "Name",
            "Value": "Cos/Gal/Sys1/Ecs/Cluster/DefaultAutoScalingGroup",
          },
        ],
        "VpcId": Object {
          "Fn::ImportValue": "CoreCosGalGalaxy:GalExportsOutputFnGetAttSharedVpcOutputsCosGalSharedVpcEA1B9578Ref35210733",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "ClusterDefaultAutoScalingGroupLaunchConfig": Object {
      "DependsOn": Array [
        "ClusterDefaultAutoScalingGroupInstanceRoleDefaultPolicy",
        "ClusterDefaultAutoScalingGroupInstanceRole",
      ],
      "Properties": Object {
        "IamInstanceProfile": Object {
          "Ref": "ClusterDefaultAutoScalingGroupInstanceProfile",
        },
        "ImageId": Object {
          "Ref": "SsmParameterValueawsserviceecsoptimizedamiamazonlinux2recommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter",
        },
        "InstanceType": "t3.medium",
        "SecurityGroups": Array [
          Object {
            "Fn::GetAtt": Array [
              "ClusterDefaultAutoScalingGroupInstanceSecurityGroup",
              "GroupId",
            ],
          },
        ],
        "UserData": Object {
          "Fn::Base64": Object {
            "Fn::Join": Array [
              "",
              Array [
                "#!/bin/bash
function exitTrap(){
exitCode=$?
service docker restart
}
trap exitTrap EXIT
exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
echo ECS_CLUSTER=",
                Object {
                  "Ref": "Cluster",
                },
                " >> /etc/ecs/ecs.config
sudo iptables --insert FORWARD 1 --in-interface docker+ --destination 169.254.169.254/32 --jump DROP
sudo service iptables save
echo ECS_AWSVPC_BLOCK_IMDS=true >> /etc/ecs/ecs.config
cat <<EOF >> /etc/sysconfig/docker
TEST=test
EOF
cat <<EOF >> /etc/sysconfig/docker
TEST2=test2
EOF
cat <<EOF >> /etc/ecs/ecs.config
TEST=test
EOF
cat <<EOF >> /etc/ecs/ecs.config
TEST2=test2
EOF",
              ],
            ],
          },
        },
      },
      "Type": "AWS::AutoScaling::LaunchConfiguration",
    },
    "ClusterDefaultAutoScalingGroupLifecycleHookDrainHook": Object {
      "DependsOn": Array [
        "ClusterDefaultAutoScalingGroupLifecycleHookDrainHookRoleDefaultPolicy",
        "ClusterDefaultAutoScalingGroupLifecycleHookDrainHookRole",
      ],
      "Properties": Object {
        "AutoScalingGroupName": Object {
          "Ref": "ClusterDefaultAutoScalingGroupASG",
        },
        "DefaultResult": "CONTINUE",
        "HeartbeatTimeout": 300,
        "LifecycleTransition": "autoscaling:EC2_INSTANCE_TERMINATING",
        "NotificationTargetARN": Object {
          "Ref": "ClusterDefaultAutoScalingGroupLifecycleHookDrainHookTopic",
        },
        "RoleARN": Object {
          "Fn::GetAtt": Array [
            "ClusterDefaultAutoScalingGroupLifecycleHookDrainHookRole",
            "Arn",
          ],
        },
      },
      "Type": "AWS::AutoScaling::LifecycleHook",
    },
    "ClusterDefaultAutoScalingGroupLifecycleHookDrainHookRole": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "autoscaling.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": Array [
          Object {
            "Key": "cosmos",
            "Value": "Cos",
          },
          Object {
            "Key": "cosmos:feature",
            "Value": "Ecs",
          },
          Object {
            "Key": "cosmos:galaxy",
            "Value": "Gal",
          },
          Object {
            "Key": "cosmos:solarsystem",
            "Value": "Sys1",
          },
          Object {
            "Key": "Name",
            "Value": "Cos/Gal/Sys1/Ecs/Cluster/DefaultAutoScalingGroup",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ClusterDefaultAutoScalingGroupLifecycleHookDrainHookRoleDefaultPolicy": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "kms:Decrypt",
                "kms:GenerateDataKey",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::ImportValue": "CoreCosGalGalaxy:GalExportsOutputFnGetAttSharedKeyArn962CB6B9",
              },
            },
            Object {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "ClusterDefaultAutoScalingGroupLifecycleHookDrainHookTopic",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ClusterDefaultAutoScalingGroupLifecycleHookDrainHookRoleDefaultPolicy",
        "Roles": Array [
          Object {
            "Ref": "ClusterDefaultAutoScalingGroupLifecycleHookDrainHookRole",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ClusterDefaultAutoScalingGroupLifecycleHookDrainHookTopic": Object {
      "Properties": Object {
        "KmsMasterKeyId": Object {
          "Fn::ImportValue": "CoreCosGalGalaxy:GalExportsOutputFnGetAttSharedKeyArn962CB6B9",
        },
        "Tags": Array [
          Object {
            "Key": "cosmos",
            "Value": "Cos",
          },
          Object {
            "Key": "cosmos:feature",
            "Value": "Ecs",
          },
          Object {
            "Key": "cosmos:galaxy",
            "Value": "Gal",
          },
          Object {
            "Key": "cosmos:solarsystem",
            "Value": "Sys1",
          },
          Object {
            "Key": "Name",
            "Value": "Cos/Gal/Sys1/Ecs/Cluster/DefaultAutoScalingGroup",
          },
        ],
      },
      "Type": "AWS::SNS::Topic",
    },
  },
}
`;
