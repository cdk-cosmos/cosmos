// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ECS-Solar-System Extension should match snapshot 1`] = `
Object {
  "Description": "Cosmos EcsSolarSystem Extension: App resources dependant on each App Env, like Services and Databases.",
}
`;

exports[`ECS-Solar-System should match snapshot 1`] = `
Object {
  "Description": "Cosmos EcsSolarSystem: Resources dependant on each App Env, like ECS & ALB",
  "Outputs": Object {
    "AlbAlbArn": Object {
      "Export": Object {
        "Name": "CoreGalSysAlbArn",
      },
      "Value": Object {
        "Ref": "Alb",
      },
    },
    "AlbAlbSecurityGroupId": Object {
      "Export": Object {
        "Name": "CoreGalSysAlbSecurityGroupId",
      },
      "Value": Object {
        "Fn::GetAtt": Array [
          "AlbSecurityGroup",
          "GroupId",
        ],
      },
    },
    "AlbHttpInternalListenerAlArn": Object {
      "Export": Object {
        "Name": "CoreGalSysHttpInternalListenerArn",
      },
      "Value": Object {
        "Ref": "AlbHttpInternalListener",
      },
    },
    "AlbHttpInternalListenerAlSecurityGroupId": Object {
      "Export": Object {
        "Name": "CoreGalSysHttpInternalListenerSecurityGroupId",
      },
      "Value": Object {
        "Fn::GetAtt": Array [
          "AlbSecurityGroup",
          "GroupId",
        ],
      },
    },
    "AlbHttpListenerAlArn": Object {
      "Export": Object {
        "Name": "CoreGalSysHttpListenerArn",
      },
      "Value": Object {
        "Ref": "AlbHttpListener",
      },
    },
    "AlbHttpListenerAlSecurityGroupId": Object {
      "Export": Object {
        "Name": "CoreGalSysHttpListenerSecurityGroupId",
      },
      "Value": Object {
        "Fn::GetAtt": Array [
          "AlbSecurityGroup",
          "GroupId",
        ],
      },
    },
    "ClusterClusterName": Object {
      "Export": Object {
        "Name": "CoreGalSysClusterName",
      },
      "Value": Object {
        "Ref": "Cluster",
      },
    },
    "ClusterClusterSecurityGroup": Object {
      "Export": Object {
        "Name": "CoreGalSysClusterSecurityGroup",
      },
      "Value": Object {
        "Fn::GetAtt": Array [
          "ClusterCapacityInstanceSecurityGroup",
          "GroupId",
        ],
      },
    },
    "PrivateZoneZoneId": Object {
      "Export": Object {
        "Name": "CoreGalSysPrivateZoneId",
      },
      "Value": Object {
        "Ref": "PrivateZone",
      },
    },
    "PrivateZoneZoneName": Object {
      "Export": Object {
        "Name": "CoreGalSysPrivateZoneName",
      },
      "Value": "sys.internal",
    },
    "VpcAZs": Object {
      "Export": Object {
        "Name": "CoreGalSysVpcAZs",
      },
      "Value": Object {
        "Fn::Join": Array [
          ",",
          Array [
            Object {
              "Fn::Select": Array [
                0,
                Object {
                  "Fn::GetAZs": "",
                },
              ],
            },
            Object {
              "Fn::Select": Array [
                1,
                Object {
                  "Fn::GetAZs": "",
                },
              ],
            },
          ],
        ],
      },
    },
    "VpcId": Object {
      "Export": Object {
        "Name": "CoreGalSysVpcId",
      },
      "Value": Object {
        "Fn::ImportValue": "CoreCosGalGalaxy:GalExportsOutputRefSharedVpcE991AEE7",
      },
    },
    "VpcIsolatedSubnetRouteTables": Object {
      "Export": Object {
        "Name": "CoreGalSysVpcIsolatedSubnetRouteTableIds",
      },
      "Value": Object {
        "Fn::Join": Array [
          ",",
          Array [
            Object {
              "Fn::ImportValue": "CoreCosGalGalaxy:GalExportsOutputRefSharedVpcAppSubnet1RouteTable4F065E1D",
            },
            Object {
              "Fn::ImportValue": "CoreCosGalGalaxy:GalExportsOutputRefSharedVpcAppSubnet2RouteTable885CD303",
            },
          ],
        ],
      },
    },
    "VpcIsolatedSubnets": Object {
      "Export": Object {
        "Name": "CoreGalSysVpcIsolatedSubnetIds",
      },
      "Value": Object {
        "Fn::Join": Array [
          ",",
          Array [
            Object {
              "Fn::ImportValue": "CoreCosGalGalaxy:GalExportsOutputRefSharedVpcAppSubnet1Subnet415CBBC7",
            },
            Object {
              "Fn::ImportValue": "CoreCosGalGalaxy:GalExportsOutputRefSharedVpcAppSubnet2Subnet7353E307",
            },
          ],
        ],
      },
    },
    "ZoneNameServers": Object {
      "Export": Object {
        "Name": "CoreGalSysZoneNameServers",
      },
      "Value": Object {
        "Fn::Join": Array [
          ",",
          Object {
            "Fn::GetAtt": Array [
              "Zone",
              "NameServers",
            ],
          },
        ],
      },
    },
    "ZoneZoneId": Object {
      "Export": Object {
        "Name": "CoreGalSysZoneId",
      },
      "Value": Object {
        "Ref": "Zone",
      },
    },
    "ZoneZoneName": Object {
      "Export": Object {
        "Name": "CoreGalSysZoneName",
      },
      "Value": "sys.cos.com",
    },
  },
  "Parameters": Object {
    "SsmParameterValueawsserviceecsoptimizedamiamazonlinux2recommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter": Object {
      "Default": "/aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id",
      "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
    },
  },
  "Resources": Object {
    "Alb": Object {
      "Properties": Object {
        "Name": "CoreGalSysAlb",
        "Scheme": "internal",
        "SecurityGroups": Array [
          Object {
            "Fn::GetAtt": Array [
              "AlbSecurityGroup",
              "GroupId",
            ],
          },
        ],
        "Subnets": Array [
          Object {
            "Fn::ImportValue": "CoreCosGalGalaxy:GalExportsOutputRefSharedVpcAppSubnet1Subnet415CBBC7",
          },
          Object {
            "Fn::ImportValue": "CoreCosGalGalaxy:GalExportsOutputRefSharedVpcAppSubnet2Subnet7353E307",
          },
        ],
        "Tags": Array [
          Object {
            "Key": "cosmos",
            "Value": "Cos",
          },
          Object {
            "Key": "galaxy",
            "Value": "Gal",
          },
          Object {
            "Key": "cosmos:solarsystem",
            "Value": "Sys",
          },
        ],
        "Type": "application",
      },
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
    },
    "AlbHttpInternalListener": Object {
      "Properties": Object {
        "DefaultActions": Array [
          Object {
            "FixedResponseConfig": Object {
              "ContentType": "text/plain",
              "MessageBody": "Route Not Found.",
              "StatusCode": "404",
            },
            "Type": "fixed-response",
          },
        ],
        "LoadBalancerArn": Object {
          "Ref": "Alb",
        },
        "Port": 81,
        "Protocol": "HTTP",
      },
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
    },
    "AlbHttpListener": Object {
      "Properties": Object {
        "DefaultActions": Array [
          Object {
            "FixedResponseConfig": Object {
              "ContentType": "text/plain",
              "MessageBody": "Route Not Found.",
              "StatusCode": "404",
            },
            "Type": "fixed-response",
          },
        ],
        "LoadBalancerArn": Object {
          "Ref": "Alb",
        },
        "Port": 80,
        "Protocol": "HTTP",
      },
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
    },
    "AlbRecord": Object {
      "Properties": Object {
        "AliasTarget": Object {
          "DNSName": Object {
            "Fn::GetAtt": Array [
              "Alb",
              "DNSName",
            ],
          },
          "HostedZoneId": Object {
            "Fn::GetAtt": Array [
              "Alb",
              "CanonicalHostedZoneID",
            ],
          },
        },
        "HostedZoneId": Object {
          "Ref": "Zone",
        },
        "Name": "sys.cos.com.",
        "Type": "A",
      },
      "Type": "AWS::Route53::RecordSet",
    },
    "AlbSecurityGroup": Object {
      "Properties": Object {
        "GroupDescription": "SecurityGroup for ALB.",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "SecurityGroupIngress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow from anyone on port 80",
            "FromPort": 80,
            "IpProtocol": "tcp",
            "ToPort": 80,
          },
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow from anyone on port 81",
            "FromPort": 81,
            "IpProtocol": "tcp",
            "ToPort": 81,
          },
        ],
        "Tags": Array [
          Object {
            "Key": "cosmos",
            "Value": "Cos",
          },
          Object {
            "Key": "galaxy",
            "Value": "Gal",
          },
          Object {
            "Key": "cosmos:solarsystem",
            "Value": "Sys",
          },
        ],
        "VpcId": Object {
          "Fn::ImportValue": "CoreCosGalGalaxy:GalExportsOutputRefSharedVpcE991AEE7",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "Cluster": Object {
      "Properties": Object {
        "ClusterName": "CoreGalSysCluster",
        "Tags": Array [
          Object {
            "Key": "cosmos",
            "Value": "Cos",
          },
          Object {
            "Key": "galaxy",
            "Value": "Gal",
          },
          Object {
            "Key": "cosmos:solarsystem",
            "Value": "Sys",
          },
        ],
      },
      "Type": "AWS::ECS::Cluster",
    },
    "ClusterCapacityASG": Object {
      "Properties": Object {
        "LaunchConfigurationName": Object {
          "Ref": "ClusterCapacityLaunchConfig",
        },
        "MaxSize": "5",
        "MinSize": "1",
        "Tags": Array [
          Object {
            "Key": "cosmos",
            "PropagateAtLaunch": true,
            "Value": "Cos",
          },
          Object {
            "Key": "galaxy",
            "PropagateAtLaunch": true,
            "Value": "Gal",
          },
          Object {
            "Key": "cosmos:solarsystem",
            "PropagateAtLaunch": true,
            "Value": "Sys",
          },
          Object {
            "Key": "Name",
            "PropagateAtLaunch": true,
            "Value": "Cos/Gal/Sys/Cluster/Capacity",
          },
        ],
        "VPCZoneIdentifier": Array [
          Object {
            "Fn::ImportValue": "CoreCosGalGalaxy:GalExportsOutputRefSharedVpcAppSubnet1Subnet415CBBC7",
          },
          Object {
            "Fn::ImportValue": "CoreCosGalGalaxy:GalExportsOutputRefSharedVpcAppSubnet2Subnet7353E307",
          },
        ],
      },
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "UpdatePolicy": Object {
        "AutoScalingReplacingUpdate": Object {
          "WillReplace": true,
        },
        "AutoScalingScheduledAction": Object {
          "IgnoreUnmodifiedGroupSizeProperties": true,
        },
      },
    },
    "ClusterCapacityDrainECSHookFunction": Object {
      "DependsOn": Array [
        "ClusterCapacityDrainECSHookFunctionServiceRoleDefaultPolicy",
        "ClusterCapacityDrainECSHookFunctionServiceRole",
      ],
      "Properties": Object {
        "Code": Object {
          "ZipFile": "import boto3, json, os, time

ecs = boto3.client('ecs')
autoscaling = boto3.client('autoscaling')


def lambda_handler(event, context):
  print(json.dumps(event))
  cluster = os.environ['CLUSTER']
  snsTopicArn = event['Records'][0]['Sns']['TopicArn']
  lifecycle_event = json.loads(event['Records'][0]['Sns']['Message'])
  instance_id = lifecycle_event.get('EC2InstanceId')
  if not instance_id:
    print('Got event without EC2InstanceId: %s', json.dumps(event))
    return

  instance_arn = container_instance_arn(cluster, instance_id)
  print('Instance %s has container instance ARN %s' % (lifecycle_event['EC2InstanceId'], instance_arn))

  if not instance_arn:
    return

  while has_tasks(cluster, instance_arn):
    time.sleep(10)

  try:
    print('Terminating instance %s' % instance_id)
    autoscaling.complete_lifecycle_action(
        LifecycleActionResult='CONTINUE',
        **pick(lifecycle_event, 'LifecycleHookName', 'LifecycleActionToken', 'AutoScalingGroupName'))
  except Exception as e:
    # Lifecycle action may have already completed.
    print(str(e))


def container_instance_arn(cluster, instance_id):
  \\"\\"\\"Turn an instance ID into a container instance ARN.\\"\\"\\"
  arns = ecs.list_container_instances(cluster=cluster, filter='ec2InstanceId==' + instance_id)['containerInstanceArns']
  if not arns:
    return None
  return arns[0]


def has_tasks(cluster, instance_arn):
  \\"\\"\\"Return True if the instance is running tasks for the given cluster.\\"\\"\\"
  instances = ecs.describe_container_instances(cluster=cluster, containerInstances=[instance_arn])['containerInstances']
  if not instances:
    return False
  instance = instances[0]

  if instance['status'] == 'ACTIVE':
    # Start draining, then try again later
    set_container_instance_to_draining(cluster, instance_arn)
    return True

  tasks = instance['runningTasksCount'] + instance['pendingTasksCount']
  print('Instance %s has %s tasks' % (instance_arn, tasks))

  return tasks > 0


def set_container_instance_to_draining(cluster, instance_arn):
  ecs.update_container_instances_state(
      cluster=cluster,
      containerInstances=[instance_arn], status='DRAINING')


def pick(dct, *keys):
  \\"\\"\\"Pick a subset of a dict.\\"\\"\\"
  return {k: v for k, v in dct.items() if k in keys}
",
        },
        "Environment": Object {
          "Variables": Object {
            "CLUSTER": Object {
              "Ref": "Cluster",
            },
          },
        },
        "Handler": "index.lambda_handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "ClusterCapacityDrainECSHookFunctionServiceRole",
            "Arn",
          ],
        },
        "Runtime": "python3.6",
        "Tags": Array [
          Object {
            "Key": "cosmos",
            "Value": "Cos",
          },
          Object {
            "Key": "galaxy",
            "Value": "Gal",
          },
          Object {
            "Key": "cosmos:solarsystem",
            "Value": "Sys",
          },
          Object {
            "Key": "Name",
            "Value": "Cos/Gal/Sys/Cluster/Capacity",
          },
        ],
        "Timeout": 310,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ClusterCapacityDrainECSHookFunctionAllowInvokeCosGalSysClusterCapacityLifecycleHookDrainHookTopic2C16A780": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "ClusterCapacityDrainECSHookFunction",
            "Arn",
          ],
        },
        "Principal": "sns.amazonaws.com",
        "SourceArn": Object {
          "Ref": "ClusterCapacityLifecycleHookDrainHookTopic",
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ClusterCapacityDrainECSHookFunctionServiceRole": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
        "Tags": Array [
          Object {
            "Key": "cosmos",
            "Value": "Cos",
          },
          Object {
            "Key": "galaxy",
            "Value": "Gal",
          },
          Object {
            "Key": "cosmos:solarsystem",
            "Value": "Sys",
          },
          Object {
            "Key": "Name",
            "Value": "Cos/Gal/Sys/Cluster/Capacity",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ClusterCapacityDrainECSHookFunctionServiceRoleDefaultPolicy": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "ec2:DescribeInstances",
                "ec2:DescribeInstanceAttribute",
                "ec2:DescribeInstanceStatus",
                "ec2:DescribeHosts",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "autoscaling:CompleteLifecycleAction",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":autoscaling:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":autoScalingGroup:*:autoScalingGroupName/",
                    Object {
                      "Ref": "ClusterCapacityASG",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "ecs:DescribeContainerInstances",
                "ecs:DescribeTasks",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "ecs:ListContainerInstances",
                "ecs:SubmitContainerStateChange",
                "ecs:SubmitTaskStateChange",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "Cluster",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "ecs:UpdateContainerInstancesState",
                "ecs:ListTasks",
              ],
              "Condition": Object {
                "ArnEquals": Object {
                  "ecs:cluster": Object {
                    "Fn::GetAtt": Array [
                      "Cluster",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ClusterCapacityDrainECSHookFunctionServiceRoleDefaultPolicy",
        "Roles": Array [
          Object {
            "Ref": "ClusterCapacityDrainECSHookFunctionServiceRole",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ClusterCapacityDrainECSHookFunctionTopic": Object {
      "Properties": Object {
        "Endpoint": Object {
          "Fn::GetAtt": Array [
            "ClusterCapacityDrainECSHookFunction",
            "Arn",
          ],
        },
        "Protocol": "lambda",
        "TopicArn": Object {
          "Ref": "ClusterCapacityLifecycleHookDrainHookTopic",
        },
      },
      "Type": "AWS::SNS::Subscription",
    },
    "ClusterCapacityInstanceProfile": Object {
      "Properties": Object {
        "Roles": Array [
          Object {
            "Ref": "ClusterCapacityInstanceRole",
          },
        ],
      },
      "Type": "AWS::IAM::InstanceProfile",
    },
    "ClusterCapacityInstanceRole": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "ec2.",
                      Object {
                        "Ref": "AWS::URLSuffix",
                      },
                    ],
                  ],
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AmazonSSMFullAccess",
              ],
            ],
          },
        ],
        "Tags": Array [
          Object {
            "Key": "cosmos",
            "Value": "Cos",
          },
          Object {
            "Key": "galaxy",
            "Value": "Gal",
          },
          Object {
            "Key": "cosmos:solarsystem",
            "Value": "Sys",
          },
          Object {
            "Key": "Name",
            "Value": "Cos/Gal/Sys/Cluster/Capacity",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ClusterCapacityInstanceRoleDefaultPolicy": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "ecs:CreateCluster",
                "ecs:DeregisterContainerInstance",
                "ecs:DiscoverPollEndpoint",
                "ecs:Poll",
                "ecs:RegisterContainerInstance",
                "ecs:StartTelemetrySession",
                "ecs:Submit*",
                "ecr:GetAuthorizationToken",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ClusterCapacityInstanceRoleDefaultPolicy",
        "Roles": Array [
          Object {
            "Ref": "ClusterCapacityInstanceRole",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ClusterCapacityInstanceSecurityGroup": Object {
      "Properties": Object {
        "GroupDescription": "Cos/Gal/Sys/Cluster/Capacity/InstanceSecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "Tags": Array [
          Object {
            "Key": "cosmos",
            "Value": "Cos",
          },
          Object {
            "Key": "galaxy",
            "Value": "Gal",
          },
          Object {
            "Key": "cosmos:solarsystem",
            "Value": "Sys",
          },
          Object {
            "Key": "Name",
            "Value": "Cos/Gal/Sys/Cluster/Capacity",
          },
        ],
        "VpcId": Object {
          "Fn::ImportValue": "CoreCosGalGalaxy:GalExportsOutputRefSharedVpcE991AEE7",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "ClusterCapacityLaunchConfig": Object {
      "DependsOn": Array [
        "ClusterCapacityInstanceRoleDefaultPolicy",
        "ClusterCapacityInstanceRole",
      ],
      "Properties": Object {
        "IamInstanceProfile": Object {
          "Ref": "ClusterCapacityInstanceProfile",
        },
        "ImageId": Object {
          "Ref": "SsmParameterValueawsserviceecsoptimizedamiamazonlinux2recommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter",
        },
        "InstanceType": "t3.medium",
        "SecurityGroups": Array [
          Object {
            "Fn::GetAtt": Array [
              "ClusterCapacityInstanceSecurityGroup",
              "GroupId",
            ],
          },
        ],
        "UserData": Object {
          "Fn::Base64": Object {
            "Fn::Join": Array [
              "",
              Array [
                "#!/bin/bash
echo ECS_CLUSTER=",
                Object {
                  "Ref": "Cluster",
                },
                " >> /etc/ecs/ecs.config
sudo iptables --insert FORWARD 1 --in-interface docker+ --destination 169.254.169.254/32 --jump DROP
sudo service iptables save
echo ECS_AWSVPC_BLOCK_IMDS=true >> /etc/ecs/ecs.config",
              ],
            ],
          },
        },
      },
      "Type": "AWS::AutoScaling::LaunchConfiguration",
    },
    "ClusterCapacityLifecycleHookDrainHook": Object {
      "DependsOn": Array [
        "ClusterCapacityLifecycleHookDrainHookRoleDefaultPolicy",
        "ClusterCapacityLifecycleHookDrainHookRole",
      ],
      "Properties": Object {
        "AutoScalingGroupName": Object {
          "Ref": "ClusterCapacityASG",
        },
        "DefaultResult": "CONTINUE",
        "HeartbeatTimeout": 300,
        "LifecycleTransition": "autoscaling:EC2_INSTANCE_TERMINATING",
        "NotificationTargetARN": Object {
          "Ref": "ClusterCapacityLifecycleHookDrainHookTopic",
        },
        "RoleARN": Object {
          "Fn::GetAtt": Array [
            "ClusterCapacityLifecycleHookDrainHookRole",
            "Arn",
          ],
        },
      },
      "Type": "AWS::AutoScaling::LifecycleHook",
    },
    "ClusterCapacityLifecycleHookDrainHookRole": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "autoscaling.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": Array [
          Object {
            "Key": "cosmos",
            "Value": "Cos",
          },
          Object {
            "Key": "galaxy",
            "Value": "Gal",
          },
          Object {
            "Key": "cosmos:solarsystem",
            "Value": "Sys",
          },
          Object {
            "Key": "Name",
            "Value": "Cos/Gal/Sys/Cluster/Capacity",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ClusterCapacityLifecycleHookDrainHookRoleDefaultPolicy": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "ClusterCapacityLifecycleHookDrainHookTopic",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ClusterCapacityLifecycleHookDrainHookRoleDefaultPolicy",
        "Roles": Array [
          Object {
            "Ref": "ClusterCapacityLifecycleHookDrainHookRole",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ClusterCapacityLifecycleHookDrainHookTopic": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "cosmos",
            "Value": "Cos",
          },
          Object {
            "Key": "galaxy",
            "Value": "Gal",
          },
          Object {
            "Key": "cosmos:solarsystem",
            "Value": "Sys",
          },
          Object {
            "Key": "Name",
            "Value": "Cos/Gal/Sys/Cluster/Capacity",
          },
        ],
      },
      "Type": "AWS::SNS::Topic",
    },
    "PrivateZone": Object {
      "Properties": Object {
        "HostedZoneConfig": Object {
          "Comment": "Core Main Private Zone for Sys SolarSystem",
        },
        "HostedZoneTags": Array [
          Object {
            "Key": "cosmos",
            "Value": "Cos",
          },
          Object {
            "Key": "galaxy",
            "Value": "Gal",
          },
          Object {
            "Key": "cosmos:solarsystem",
            "Value": "Sys",
          },
        ],
        "Name": "sys.internal.",
        "VPCs": Array [
          Object {
            "VPCId": Object {
              "Fn::ImportValue": "CoreCosGalGalaxy:GalExportsOutputRefSharedVpcE991AEE7",
            },
            "VPCRegion": Object {
              "Ref": "AWS::Region",
            },
          },
        ],
      },
      "Type": "AWS::Route53::HostedZone",
    },
    "Zone": Object {
      "Properties": Object {
        "HostedZoneConfig": Object {
          "Comment": "Core Main Zone for Sys SolarSystem",
        },
        "HostedZoneTags": Array [
          Object {
            "Key": "cosmos",
            "Value": "Cos",
          },
          Object {
            "Key": "galaxy",
            "Value": "Gal",
          },
          Object {
            "Key": "cosmos:solarsystem",
            "Value": "Sys",
          },
        ],
        "Name": "sys.cos.com.",
      },
      "Type": "AWS::Route53::HostedZone",
    },
    "ZoneDelegation": Object {
      "Properties": Object {
        "Comment": "Core Zone Delegation for Sys SolarSystem.",
        "HostedZoneId": Object {
          "Fn::ImportValue": "CoreCosCosmos:ExportsOutputRefRootZone2F3E9CEF",
        },
        "Name": "sys.cos.com.",
        "ResourceRecords": Object {
          "Fn::GetAtt": Array [
            "Zone",
            "NameServers",
          ],
        },
        "TTL": "1800",
        "Type": "NS",
      },
      "Type": "AWS::Route53::RecordSet",
    },
  },
}
`;
