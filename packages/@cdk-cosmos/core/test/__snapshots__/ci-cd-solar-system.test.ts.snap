// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CICD-Solar-System Extension should match snapshot 1`] = `
Object {
  "Description": "App resources dependant on each SolarSystem, like Services and Databases.",
  "Resources": Object {
    "CdkPipeline7DE1C2DD": Object {
      "Properties": Object {
        "ArtifactStore": Object {
          "Location": Object {
            "Ref": "CdkPipelineCdkArtifactBucketBB4756CF",
          },
          "Type": "S3",
        },
        "Name": "App-Cos-Cdk-Pipeline",
        "RoleArn": "arn:aws:iam::account:role/Core-CdkMaster-Role",
        "Stages": Array [
          Object {
            "Actions": Array [
              Object {
                "ActionTypeId": Object {
                  "Category": "Source",
                  "Owner": "AWS",
                  "Provider": "CodeCommit",
                  "Version": "1",
                },
                "Configuration": Object {
                  "BranchName": "master",
                  "PollForSourceChanges": false,
                  "RepositoryName": Object {
                    "Fn::ImportValue": "App-Cos-Cosmos:ExportsOutputFnGetAttCdkRepo9606A710Name171A5E5D",
                  },
                },
                "Name": "CdkCheckout",
                "OutputArtifacts": Array [
                  Object {
                    "Name": "CdkCodeOutput",
                  },
                ],
                "RoleArn": Object {
                  "Fn::GetAtt": Array [
                    "CdkPipelineSourceCdkCheckoutCodePipelineActionRole10FA3A48",
                    "Arn",
                  ],
                },
                "RunOrder": 1,
              },
            ],
            "Name": "Source",
          },
          Object {
            "Actions": Array [
              Object {
                "ActionTypeId": Object {
                  "Category": "Build",
                  "Owner": "AWS",
                  "Provider": "CodeBuild",
                  "Version": "1",
                },
                "Configuration": Object {
                  "EnvironmentVariables": "[{\\"name\\":\\"STACKS\\",\\"type\\":\\"PLAINTEXT\\",\\"value\\":\\"App-Cos-*\\"}]",
                  "ProjectName": Object {
                    "Ref": "CdkPipelineCdkDeploy613E8280",
                  },
                },
                "InputArtifacts": Array [
                  Object {
                    "Name": "CdkCodeOutput",
                  },
                ],
                "Name": "CdkDeploy",
                "OutputArtifacts": Array [
                  Object {
                    "Name": "CdkDeployOutput",
                  },
                ],
                "RoleArn": Object {
                  "Fn::GetAtt": Array [
                    "CdkPipelineDeployCdkDeployCodePipelineActionRoleABC30949",
                    "Arn",
                  ],
                },
                "RunOrder": 1,
              },
            ],
            "Name": "Deploy",
          },
        ],
      },
      "Type": "AWS::CodePipeline::Pipeline",
    },
    "CdkPipelineCdkArtifactBucketBB4756CF": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "BucketEncryption": Object {
          "ServerSideEncryptionConfiguration": Array [
            Object {
              "ServerSideEncryptionByDefault": Object {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "CdkPipelineCdkDeploy613E8280": Object {
      "Properties": Object {
        "Artifacts": Object {
          "Location": Object {
            "Ref": "CdkPipelineCdkArtifactBucketBB4756CF",
          },
          "Name": "cdk.templates",
          "NamespaceType": "BUILD_ID",
          "Packaging": "ZIP",
          "Path": "CodeBuild",
          "Type": "S3",
        },
        "Environment": Object {
          "ComputeType": "BUILD_GENERAL1_SMALL",
          "EnvironmentVariables": Array [
            Object {
              "Name": "STACKS",
              "Type": "PLAINTEXT",
              "Value": "",
            },
          ],
          "Image": "aws/codebuild/standard:3.0",
          "PrivilegedMode": false,
          "Type": "LINUX_CONTAINER",
        },
        "Name": "App-Cos-Cdk-PipelineDeploy",
        "ServiceRole": "arn:aws:iam::account:role/Core-CdkMaster-Role",
        "Source": Object {
          "BuildSpec": "{
  \\"version\\": \\"0.2\\",
  \\"phases\\": {
    \\"install\\": {
      \\"runtime-versions\\": {
        \\"nodejs\\": \\"12\\"
      }
    },
    \\"pre_build\\": {
      \\"commands\\": [
        \\"npm ci\\"
      ]
    },
    \\"build\\": {
      \\"commands\\": [
        \\"npx cdk synth \${STACKS}\\",
        \\"npx cdk deploy --require-approval=never \${STACKS}\\"
      ]
    }
  },
  \\"artifacts\\": {
    \\"base-directory\\": \\"cdk.out\\",
    \\"files\\": [
      \\"*.template.json\\"
    ]
  }
}",
          "Location": Object {
            "Fn::ImportValue": "App-Cos-Cosmos:ExportsOutputFnGetAttCdkRepo9606A710CloneUrlHttpF918145B",
          },
          "Type": "CODECOMMIT",
        },
        "SourceVersion": "master",
      },
      "Type": "AWS::CodeBuild::Project",
    },
    "CdkPipelineDeployCdkDeployCodePipelineActionRoleABC30949": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::account:root",
                    ],
                  ],
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "CdkPipelineDeployCdkDeployCodePipelineActionRoleDefaultPolicyC3BBEE2C": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "codebuild:BatchGetBuilds",
                "codebuild:StartBuild",
                "codebuild:StopBuild",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "CdkPipelineCdkDeploy613E8280",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CdkPipelineDeployCdkDeployCodePipelineActionRoleDefaultPolicyC3BBEE2C",
        "Roles": Array [
          Object {
            "Ref": "CdkPipelineDeployCdkDeployCodePipelineActionRoleABC30949",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CdkPipelineSourceCdkCheckoutCodePipelineActionRole10FA3A48": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::account:root",
                    ],
                  ],
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "CdkPipelineSourceCdkCheckoutCodePipelineActionRoleDefaultPolicy8D3C82EA": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject*",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "CdkPipelineCdkArtifactBucketBB4756CF",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "CdkPipelineCdkArtifactBucketBB4756CF",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "codecommit:GetBranch",
                "codecommit:GetCommit",
                "codecommit:UploadArchive",
                "codecommit:GetUploadArchiveStatus",
                "codecommit:CancelUploadArchive",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::ImportValue": "App-Cos-Cosmos:ExportsOutputFnGetAttCdkRepo9606A710ArnF2A3B4CE",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CdkPipelineSourceCdkCheckoutCodePipelineActionRoleDefaultPolicy8D3C82EA",
        "Roles": Array [
          Object {
            "Ref": "CdkPipelineSourceCdkCheckoutCodePipelineActionRole10FA3A48",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
  },
}
`;

exports[`CICD-Solar-System should match snapshot 1`] = `
Object {
  "Description": "Resources dependant on each SolarSystem, like Vpc and MainZone.",
  "Outputs": Object {
    "AlbAlbArn044BCECB": Object {
      "Export": Object {
        "Name": "Core-Gal-CiCd-Alb-Arn",
      },
      "Value": Object {
        "Ref": "Alb16C2F182",
      },
    },
    "AlbAlbSecurityGroupIdD444E58A": Object {
      "Export": Object {
        "Name": "Core-Gal-CiCd-Alb-SecurityGroupId",
      },
      "Value": Object {
        "Fn::GetAtt": Array [
          "AlbSecurityGroup86A59E99",
          "GroupId",
        ],
      },
    },
    "AlbHttpListenerAlArn54F636C2": Object {
      "Export": Object {
        "Name": "Core-Gal-CiCd-HttpListener-Arn",
      },
      "Value": Object {
        "Ref": "AlbHttpListener00C8B33E",
      },
    },
    "AlbHttpListenerAlSecurityGroupIdBB00BCEE": Object {
      "Export": Object {
        "Name": "Core-Gal-CiCd-HttpListener-SecurityGroupId",
      },
      "Value": Object {
        "Fn::GetAtt": Array [
          "AlbSecurityGroup86A59E99",
          "GroupId",
        ],
      },
    },
    "ClusterClusterNameEB26049E": Object {
      "Export": Object {
        "Name": "Core-Gal-CiCd-Cluster-Name",
      },
      "Value": Object {
        "Ref": "ClusterEB0386A7",
      },
    },
    "ClusterClusterSecurityGroupAAF8FE85": Object {
      "Export": Object {
        "Name": "Core-Gal-CiCd-Cluster-SecurityGroup",
      },
      "Value": Object {
        "Fn::GetAtt": Array [
          "ClusterCapacityInstanceSecurityGroup2D6F9ADD",
          "GroupId",
        ],
      },
    },
    "PrivateZoneZoneId22821223": Object {
      "Export": Object {
        "Name": "Core-Gal-CiCd-PrivateZone-Id",
      },
      "Value": Object {
        "Ref": "PrivateZone27242E85",
      },
    },
    "PrivateZoneZoneName34E4A3CE": Object {
      "Export": Object {
        "Name": "Core-Gal-CiCd-PrivateZone-Name",
      },
      "Value": "cicd.internal",
    },
    "VpcAZs": Object {
      "Export": Object {
        "Name": "Core-Gal-CiCd-Vpc-AZs",
      },
      "Value": "dummy1a,dummy1b",
    },
    "VpcId": Object {
      "Export": Object {
        "Name": "Core-Gal-CiCd-Vpc-Id",
      },
      "Value": Object {
        "Ref": "Vpc8378EB38",
      },
    },
    "VpcIsolatedSubnetRouteTables": Object {
      "Export": Object {
        "Name": "Core-Gal-CiCd-Vpc-IsolatedSubnetRouteTableIds",
      },
      "Value": Object {
        "Fn::Join": Array [
          ",",
          Array [
            Object {
              "Ref": "VpcMainSubnet1RouteTableB8CBA6F0",
            },
            Object {
              "Ref": "VpcMainSubnet2RouteTableBE78C2D2",
            },
          ],
        ],
      },
    },
    "VpcIsolatedSubnets": Object {
      "Export": Object {
        "Name": "Core-Gal-CiCd-Vpc-IsolatedSubnetIds",
      },
      "Value": Object {
        "Fn::Join": Array [
          ",",
          Array [
            Object {
              "Ref": "VpcMainSubnet1Subnet501A7278",
            },
            Object {
              "Ref": "VpcMainSubnet2Subnet4C1ED704",
            },
          ],
        ],
      },
    },
    "ZoneNameServers105FD0B4": Object {
      "Export": Object {
        "Name": "Core-Gal-CiCd-Zone-NameServers",
      },
      "Value": Object {
        "Fn::Join": Array [
          ",",
          Object {
            "Fn::GetAtt": Array [
              "ZoneA5DE4B68",
              "NameServers",
            ],
          },
        ],
      },
    },
    "ZoneZoneIdD97F9BE1": Object {
      "Export": Object {
        "Name": "Core-Gal-CiCd-Zone-Id",
      },
      "Value": Object {
        "Ref": "ZoneA5DE4B68",
      },
    },
    "ZoneZoneName61A65788": Object {
      "Export": Object {
        "Name": "Core-Gal-CiCd-Zone-Name",
      },
      "Value": "cicd.cos.com",
    },
  },
  "Parameters": Object {
    "SsmParameterValueawsserviceecsoptimizedamiamazonlinux2recommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter": Object {
      "Default": "/aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id",
      "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
    },
  },
  "Resources": Object {
    "Alb16C2F182": Object {
      "Properties": Object {
        "Name": "Core-Gal-CiCd-Alb",
        "Scheme": "internal",
        "SecurityGroups": Array [
          Object {
            "Fn::GetAtt": Array [
              "AlbSecurityGroup86A59E99",
              "GroupId",
            ],
          },
        ],
        "Subnets": Array [
          Object {
            "Ref": "VpcMainSubnet1Subnet501A7278",
          },
          Object {
            "Ref": "VpcMainSubnet2Subnet4C1ED704",
          },
        ],
        "Type": "application",
      },
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
    },
    "AlbHttpListener00C8B33E": Object {
      "Properties": Object {
        "DefaultActions": Array [
          Object {
            "TargetGroupArn": Object {
              "Ref": "DefaultTargetGroup00992EAD",
            },
            "Type": "forward",
          },
        ],
        "LoadBalancerArn": Object {
          "Ref": "Alb16C2F182",
        },
        "Port": 80,
        "Protocol": "HTTP",
      },
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
    },
    "AlbSecurityGroup86A59E99": Object {
      "Properties": Object {
        "GroupDescription": "SecurityGroup for SolarSystem ALB",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "SecurityGroupIngress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow from anyone on port 80",
            "FromPort": 80,
            "IpProtocol": "tcp",
            "ToPort": 80,
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "CdkPipeline7DE1C2DD": Object {
      "Properties": Object {
        "ArtifactStore": Object {
          "Location": Object {
            "Ref": "CdkPipelineCdkArtifactBucketBB4756CF",
          },
          "Type": "S3",
        },
        "Name": "Core-Cdk-Pipeline",
        "RoleArn": "arn:aws:iam::account:role/Core-CdkMaster-Role",
        "Stages": Array [
          Object {
            "Actions": Array [
              Object {
                "ActionTypeId": Object {
                  "Category": "Source",
                  "Owner": "AWS",
                  "Provider": "CodeCommit",
                  "Version": "1",
                },
                "Configuration": Object {
                  "BranchName": "master",
                  "PollForSourceChanges": false,
                  "RepositoryName": Object {
                    "Fn::ImportValue": "Core-Cos-Cosmos:ExportsOutputFnGetAttCdkRepo9606A710Name171A5E5D",
                  },
                },
                "Name": "CdkCheckout",
                "OutputArtifacts": Array [
                  Object {
                    "Name": "CdkCodeOutput",
                  },
                ],
                "RoleArn": Object {
                  "Fn::GetAtt": Array [
                    "CdkPipelineSourceCdkCheckoutCodePipelineActionRole10FA3A48",
                    "Arn",
                  ],
                },
                "RunOrder": 1,
              },
            ],
            "Name": "Source",
          },
          Object {
            "Actions": Array [
              Object {
                "ActionTypeId": Object {
                  "Category": "Build",
                  "Owner": "AWS",
                  "Provider": "CodeBuild",
                  "Version": "1",
                },
                "Configuration": Object {
                  "EnvironmentVariables": "[{\\"name\\":\\"STACKS\\",\\"type\\":\\"PLAINTEXT\\",\\"value\\":\\"Core-Cos-*\\"}]",
                  "ProjectName": Object {
                    "Ref": "CdkPipelineCdkDeploy613E8280",
                  },
                },
                "InputArtifacts": Array [
                  Object {
                    "Name": "CdkCodeOutput",
                  },
                ],
                "Name": "CdkDeploy",
                "OutputArtifacts": Array [
                  Object {
                    "Name": "CdkDeployOutput",
                  },
                ],
                "RoleArn": Object {
                  "Fn::GetAtt": Array [
                    "CdkPipelineDeployCdkDeployCodePipelineActionRoleABC30949",
                    "Arn",
                  ],
                },
                "RunOrder": 1,
              },
            ],
            "Name": "Deploy",
          },
        ],
      },
      "Type": "AWS::CodePipeline::Pipeline",
    },
    "CdkPipelineCdkArtifactBucketBB4756CF": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "BucketEncryption": Object {
          "ServerSideEncryptionConfiguration": Array [
            Object {
              "ServerSideEncryptionByDefault": Object {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "CdkPipelineCdkDeploy613E8280": Object {
      "Properties": Object {
        "Artifacts": Object {
          "Location": Object {
            "Ref": "CdkPipelineCdkArtifactBucketBB4756CF",
          },
          "Name": "cdk.templates",
          "NamespaceType": "BUILD_ID",
          "Packaging": "ZIP",
          "Path": "CodeBuild",
          "Type": "S3",
        },
        "Environment": Object {
          "ComputeType": "BUILD_GENERAL1_SMALL",
          "EnvironmentVariables": Array [
            Object {
              "Name": "STACKS",
              "Type": "PLAINTEXT",
              "Value": "",
            },
          ],
          "Image": "aws/codebuild/standard:3.0",
          "PrivilegedMode": false,
          "Type": "LINUX_CONTAINER",
        },
        "Name": "Core-Cdk-PipelineDeploy",
        "ServiceRole": "arn:aws:iam::account:role/Core-CdkMaster-Role",
        "Source": Object {
          "BuildSpec": "{
  \\"version\\": \\"0.2\\",
  \\"phases\\": {
    \\"install\\": {
      \\"runtime-versions\\": {
        \\"nodejs\\": \\"12\\"
      }
    },
    \\"pre_build\\": {
      \\"commands\\": [
        \\"npm ci\\"
      ]
    },
    \\"build\\": {
      \\"commands\\": [
        \\"npx cdk synth \${STACKS}\\",
        \\"npx cdk deploy --require-approval=never \${STACKS}\\"
      ]
    }
  },
  \\"artifacts\\": {
    \\"base-directory\\": \\"cdk.out\\",
    \\"files\\": [
      \\"*.template.json\\"
    ]
  }
}",
          "Location": Object {
            "Fn::ImportValue": "Core-Cos-Cosmos:ExportsOutputFnGetAttCdkRepo9606A710CloneUrlHttpF918145B",
          },
          "Type": "CODECOMMIT",
        },
        "SourceVersion": "master",
      },
      "Type": "AWS::CodeBuild::Project",
    },
    "CdkPipelineDeployCdkDeployCodePipelineActionRoleABC30949": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::account:root",
                    ],
                  ],
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "CdkPipelineDeployCdkDeployCodePipelineActionRoleDefaultPolicyC3BBEE2C": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "codebuild:BatchGetBuilds",
                "codebuild:StartBuild",
                "codebuild:StopBuild",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "CdkPipelineCdkDeploy613E8280",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CdkPipelineDeployCdkDeployCodePipelineActionRoleDefaultPolicyC3BBEE2C",
        "Roles": Array [
          Object {
            "Ref": "CdkPipelineDeployCdkDeployCodePipelineActionRoleABC30949",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CdkPipelineSourceCdkCheckoutCodePipelineActionRole10FA3A48": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::account:root",
                    ],
                  ],
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "CdkPipelineSourceCdkCheckoutCodePipelineActionRoleDefaultPolicy8D3C82EA": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject*",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "CdkPipelineCdkArtifactBucketBB4756CF",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "CdkPipelineCdkArtifactBucketBB4756CF",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "codecommit:GetBranch",
                "codecommit:GetCommit",
                "codecommit:UploadArchive",
                "codecommit:GetUploadArchiveStatus",
                "codecommit:CancelUploadArchive",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::ImportValue": "Core-Cos-Cosmos:ExportsOutputFnGetAttCdkRepo9606A710ArnF2A3B4CE",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CdkPipelineSourceCdkCheckoutCodePipelineActionRoleDefaultPolicy8D3C82EA",
        "Roles": Array [
          Object {
            "Ref": "CdkPipelineSourceCdkCheckoutCodePipelineActionRole10FA3A48",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ClusterCapacityASGA6ED330E": Object {
      "Properties": Object {
        "DesiredCapacity": "1",
        "LaunchConfigurationName": Object {
          "Ref": "ClusterCapacityLaunchConfigC44566A4",
        },
        "MaxSize": "5",
        "MinSize": "1",
        "Tags": Array [
          Object {
            "Key": "Name",
            "PropagateAtLaunch": true,
            "Value": "Core-Cos-Gal-CiCd-SolarSystem/Cluster/Capacity",
          },
        ],
        "VPCZoneIdentifier": Array [
          Object {
            "Ref": "VpcMainSubnet1Subnet501A7278",
          },
          Object {
            "Ref": "VpcMainSubnet2Subnet4C1ED704",
          },
        ],
      },
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "UpdatePolicy": Object {
        "AutoScalingReplacingUpdate": Object {
          "WillReplace": true,
        },
        "AutoScalingScheduledAction": Object {
          "IgnoreUnmodifiedGroupSizeProperties": true,
        },
      },
    },
    "ClusterCapacityDrainECSHookFunctionAllowInvokeCoreCosGalCiCdSolarSystemClusterCapacityLifecycleHookDrainHookTopic8F2B1C78AFBD2CFE": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "ClusterCapacityDrainECSHookFunctionF75C9A9F",
            "Arn",
          ],
        },
        "Principal": "sns.amazonaws.com",
        "SourceArn": Object {
          "Ref": "ClusterCapacityLifecycleHookDrainHookTopic1768B95F",
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ClusterCapacityDrainECSHookFunctionF75C9A9F": Object {
      "DependsOn": Array [
        "ClusterCapacityDrainECSHookFunctionServiceRoleDefaultPolicyAB4154DA",
        "ClusterCapacityDrainECSHookFunctionServiceRole58D510CB",
      ],
      "Properties": Object {
        "Code": Object {
          "ZipFile": "import boto3, json, os, time

ecs = boto3.client('ecs')
autoscaling = boto3.client('autoscaling')


def lambda_handler(event, context):
  print(json.dumps(event))
  cluster = os.environ['CLUSTER']
  snsTopicArn = event['Records'][0]['Sns']['TopicArn']
  lifecycle_event = json.loads(event['Records'][0]['Sns']['Message'])
  instance_id = lifecycle_event.get('EC2InstanceId')
  if not instance_id:
    print('Got event without EC2InstanceId: %s', json.dumps(event))
    return

  instance_arn = container_instance_arn(cluster, instance_id)
  print('Instance %s has container instance ARN %s' % (lifecycle_event['EC2InstanceId'], instance_arn))

  if not instance_arn:
    return

  while has_tasks(cluster, instance_arn):
    time.sleep(10)

  try:
    print('Terminating instance %s' % instance_id)
    autoscaling.complete_lifecycle_action(
        LifecycleActionResult='CONTINUE',
        **pick(lifecycle_event, 'LifecycleHookName', 'LifecycleActionToken', 'AutoScalingGroupName'))
  except Exception as e:
    # Lifecycle action may have already completed.
    print(str(e))


def container_instance_arn(cluster, instance_id):
  \\"\\"\\"Turn an instance ID into a container instance ARN.\\"\\"\\"
  arns = ecs.list_container_instances(cluster=cluster, filter='ec2InstanceId==' + instance_id)['containerInstanceArns']
  if not arns:
    return None
  return arns[0]


def has_tasks(cluster, instance_arn):
  \\"\\"\\"Return True if the instance is running tasks for the given cluster.\\"\\"\\"
  instances = ecs.describe_container_instances(cluster=cluster, containerInstances=[instance_arn])['containerInstances']
  if not instances:
    return False
  instance = instances[0]

  if instance['status'] == 'ACTIVE':
    # Start draining, then try again later
    set_container_instance_to_draining(cluster, instance_arn)
    return True

  tasks = instance['runningTasksCount'] + instance['pendingTasksCount']
  print('Instance %s has %s tasks' % (instance_arn, tasks))

  return tasks > 0


def set_container_instance_to_draining(cluster, instance_arn):
  ecs.update_container_instances_state(
      cluster=cluster,
      containerInstances=[instance_arn], status='DRAINING')


def pick(dct, *keys):
  \\"\\"\\"Pick a subset of a dict.\\"\\"\\"
  return {k: v for k, v in dct.items() if k in keys}
",
        },
        "Environment": Object {
          "Variables": Object {
            "CLUSTER": Object {
              "Ref": "ClusterEB0386A7",
            },
          },
        },
        "Handler": "index.lambda_handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "ClusterCapacityDrainECSHookFunctionServiceRole58D510CB",
            "Arn",
          ],
        },
        "Runtime": "python3.6",
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Core-Cos-Gal-CiCd-SolarSystem/Cluster/Capacity",
          },
        ],
        "Timeout": 310,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ClusterCapacityDrainECSHookFunctionServiceRole58D510CB": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Core-Cos-Gal-CiCd-SolarSystem/Cluster/Capacity",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ClusterCapacityDrainECSHookFunctionServiceRoleDefaultPolicyAB4154DA": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "ec2:DescribeInstances",
                "ec2:DescribeInstanceAttribute",
                "ec2:DescribeInstanceStatus",
                "ec2:DescribeHosts",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "autoscaling:CompleteLifecycleAction",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":autoscaling:region:account:autoScalingGroup:*:autoScalingGroupName/",
                    Object {
                      "Ref": "ClusterCapacityASGA6ED330E",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "ecs:DescribeContainerInstances",
                "ecs:DescribeTasks",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "ecs:ListContainerInstances",
                "ecs:SubmitContainerStateChange",
                "ecs:SubmitTaskStateChange",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "ClusterEB0386A7",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "ecs:UpdateContainerInstancesState",
                "ecs:ListTasks",
              ],
              "Condition": Object {
                "ArnEquals": Object {
                  "ecs:cluster": Object {
                    "Fn::GetAtt": Array [
                      "ClusterEB0386A7",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ClusterCapacityDrainECSHookFunctionServiceRoleDefaultPolicyAB4154DA",
        "Roles": Array [
          Object {
            "Ref": "ClusterCapacityDrainECSHookFunctionServiceRole58D510CB",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ClusterCapacityDrainECSHookFunctionTopic49CF7031": Object {
      "Properties": Object {
        "Endpoint": Object {
          "Fn::GetAtt": Array [
            "ClusterCapacityDrainECSHookFunctionF75C9A9F",
            "Arn",
          ],
        },
        "Protocol": "lambda",
        "TopicArn": Object {
          "Ref": "ClusterCapacityLifecycleHookDrainHookTopic1768B95F",
        },
      },
      "Type": "AWS::SNS::Subscription",
    },
    "ClusterCapacityInstanceProfileCD41BDF7": Object {
      "Properties": Object {
        "Roles": Array [
          Object {
            "Ref": "ClusterCapacityInstanceRole4A69070A",
          },
        ],
      },
      "Type": "AWS::IAM::InstanceProfile",
    },
    "ClusterCapacityInstanceRole4A69070A": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "ec2.",
                      Object {
                        "Ref": "AWS::URLSuffix",
                      },
                    ],
                  ],
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Core-Cos-Gal-CiCd-SolarSystem/Cluster/Capacity",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ClusterCapacityInstanceRoleDefaultPolicyCCA4190D": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "ecs:CreateCluster",
                "ecs:DeregisterContainerInstance",
                "ecs:DiscoverPollEndpoint",
                "ecs:Poll",
                "ecs:RegisterContainerInstance",
                "ecs:StartTelemetrySession",
                "ecs:Submit*",
                "ecr:GetAuthorizationToken",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ClusterCapacityInstanceRoleDefaultPolicyCCA4190D",
        "Roles": Array [
          Object {
            "Ref": "ClusterCapacityInstanceRole4A69070A",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ClusterCapacityInstanceSecurityGroup2D6F9ADD": Object {
      "Properties": Object {
        "GroupDescription": "Core-Cos-Gal-CiCd-SolarSystem/Cluster/Capacity/InstanceSecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Core-Cos-Gal-CiCd-SolarSystem/Cluster/Capacity",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "ClusterCapacityLaunchConfigC44566A4": Object {
      "DependsOn": Array [
        "ClusterCapacityInstanceRoleDefaultPolicyCCA4190D",
        "ClusterCapacityInstanceRole4A69070A",
      ],
      "Properties": Object {
        "IamInstanceProfile": Object {
          "Ref": "ClusterCapacityInstanceProfileCD41BDF7",
        },
        "ImageId": Object {
          "Ref": "SsmParameterValueawsserviceecsoptimizedamiamazonlinux2recommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter",
        },
        "InstanceType": "t2.medium",
        "SecurityGroups": Array [
          Object {
            "Fn::GetAtt": Array [
              "ClusterCapacityInstanceSecurityGroup2D6F9ADD",
              "GroupId",
            ],
          },
        ],
        "UserData": Object {
          "Fn::Base64": Object {
            "Fn::Join": Array [
              "",
              Array [
                "#!/bin/bash
echo ECS_CLUSTER=",
                Object {
                  "Ref": "ClusterEB0386A7",
                },
                " >> /etc/ecs/ecs.config
sudo iptables --insert FORWARD 1 --in-interface docker+ --destination 169.254.169.254/32 --jump DROP
sudo service iptables save
echo ECS_AWSVPC_BLOCK_IMDS=true >> /etc/ecs/ecs.config",
              ],
            ],
          },
        },
      },
      "Type": "AWS::AutoScaling::LaunchConfiguration",
    },
    "ClusterCapacityLifecycleHookDrainHook9C5B4B9E": Object {
      "DependsOn": Array [
        "ClusterCapacityLifecycleHookDrainHookRoleDefaultPolicy34F3958B",
        "ClusterCapacityLifecycleHookDrainHookRoleB2BDD5F9",
      ],
      "Properties": Object {
        "AutoScalingGroupName": Object {
          "Ref": "ClusterCapacityASGA6ED330E",
        },
        "DefaultResult": "CONTINUE",
        "HeartbeatTimeout": 300,
        "LifecycleTransition": "autoscaling:EC2_INSTANCE_TERMINATING",
        "NotificationTargetARN": Object {
          "Ref": "ClusterCapacityLifecycleHookDrainHookTopic1768B95F",
        },
        "RoleARN": Object {
          "Fn::GetAtt": Array [
            "ClusterCapacityLifecycleHookDrainHookRoleB2BDD5F9",
            "Arn",
          ],
        },
      },
      "Type": "AWS::AutoScaling::LifecycleHook",
    },
    "ClusterCapacityLifecycleHookDrainHookRoleB2BDD5F9": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "autoscaling.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Core-Cos-Gal-CiCd-SolarSystem/Cluster/Capacity",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ClusterCapacityLifecycleHookDrainHookRoleDefaultPolicy34F3958B": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "ClusterCapacityLifecycleHookDrainHookTopic1768B95F",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ClusterCapacityLifecycleHookDrainHookRoleDefaultPolicy34F3958B",
        "Roles": Array [
          Object {
            "Ref": "ClusterCapacityLifecycleHookDrainHookRoleB2BDD5F9",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ClusterCapacityLifecycleHookDrainHookTopic1768B95F": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Core-Cos-Gal-CiCd-SolarSystem/Cluster/Capacity",
          },
        ],
      },
      "Type": "AWS::SNS::Topic",
    },
    "ClusterEB0386A7": Object {
      "Properties": Object {
        "ClusterName": "Core-Gal-CiCd-Cluster",
      },
      "Type": "AWS::ECS::Cluster",
    },
    "DefaultTargetGroup00992EAD": Object {
      "Properties": Object {
        "Port": 80,
        "Protocol": "HTTP",
        "TargetType": "instance",
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
    },
    "PrivateZone27242E85": Object {
      "Properties": Object {
        "HostedZoneConfig": Object {
          "Comment": "Core Main Private Zone for CiCd SolarSystem",
        },
        "Name": "cicd.internal.",
        "VPCs": Array [
          Object {
            "VPCId": Object {
              "Ref": "Vpc8378EB38",
            },
            "VPCRegion": "region",
          },
        ],
      },
      "Type": "AWS::Route53::HostedZone",
    },
    "Vpc8378EB38": Object {
      "Properties": Object {
        "CidrBlock": "10.0.4.0/24",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "InstanceTenancy": "default",
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Core-Cos-Gal-CiCd-SolarSystem/Vpc",
          },
        ],
      },
      "Type": "AWS::EC2::VPC",
    },
    "VpcCloudWatchLogsEndpointA6195533": Object {
      "Properties": Object {
        "PrivateDnsEnabled": true,
        "SecurityGroupIds": Array [
          Object {
            "Fn::GetAtt": Array [
              "VpcCloudWatchLogsEndpointSecurityGroupE044298A",
              "GroupId",
            ],
          },
        ],
        "ServiceName": Object {
          "Fn::Join": Array [
            "",
            Array [
              "com.amazonaws.",
              Object {
                "Ref": "AWS::Region",
              },
              ".logs",
            ],
          ],
        },
        "SubnetIds": Array [
          Object {
            "Ref": "VpcMainSubnet1Subnet501A7278",
          },
          Object {
            "Ref": "VpcMainSubnet2Subnet4C1ED704",
          },
        ],
        "VpcEndpointType": "Interface",
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::VPCEndpoint",
    },
    "VpcCloudWatchLogsEndpointSecurityGroupE044298A": Object {
      "Properties": Object {
        "GroupDescription": "Core-Cos-Gal-CiCd-SolarSystem/Vpc/CloudWatchLogsEndpoint/SecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "SecurityGroupIngress": Array [
          Object {
            "CidrIp": Object {
              "Fn::GetAtt": Array [
                "Vpc8378EB38",
                "CidrBlock",
              ],
            },
            "Description": Object {
              "Fn::Join": Array [
                "",
                Array [
                  "from ",
                  Object {
                    "Fn::GetAtt": Array [
                      "Vpc8378EB38",
                      "CidrBlock",
                    ],
                  },
                  ":443",
                ],
              ],
            },
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443,
          },
        ],
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Core-Cos-Gal-CiCd-SolarSystem/Vpc",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "VpcEcrDockerEndpoint53ED547B": Object {
      "Properties": Object {
        "PrivateDnsEnabled": true,
        "SecurityGroupIds": Array [
          Object {
            "Fn::GetAtt": Array [
              "VpcEcrDockerEndpointSecurityGroup5D41A216",
              "GroupId",
            ],
          },
        ],
        "ServiceName": Object {
          "Fn::Join": Array [
            "",
            Array [
              "com.amazonaws.",
              Object {
                "Ref": "AWS::Region",
              },
              ".ecr.dkr",
            ],
          ],
        },
        "SubnetIds": Array [
          Object {
            "Ref": "VpcMainSubnet1Subnet501A7278",
          },
          Object {
            "Ref": "VpcMainSubnet2Subnet4C1ED704",
          },
        ],
        "VpcEndpointType": "Interface",
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::VPCEndpoint",
    },
    "VpcEcrDockerEndpointSecurityGroup5D41A216": Object {
      "Properties": Object {
        "GroupDescription": "Core-Cos-Gal-CiCd-SolarSystem/Vpc/EcrDockerEndpoint/SecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "SecurityGroupIngress": Array [
          Object {
            "CidrIp": Object {
              "Fn::GetAtt": Array [
                "Vpc8378EB38",
                "CidrBlock",
              ],
            },
            "Description": Object {
              "Fn::Join": Array [
                "",
                Array [
                  "from ",
                  Object {
                    "Fn::GetAtt": Array [
                      "Vpc8378EB38",
                      "CidrBlock",
                    ],
                  },
                  ":443",
                ],
              ],
            },
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443,
          },
        ],
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Core-Cos-Gal-CiCd-SolarSystem/Vpc",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "VpcEcsAgentEndpoint7C64BE78": Object {
      "Properties": Object {
        "PrivateDnsEnabled": true,
        "SecurityGroupIds": Array [
          Object {
            "Fn::GetAtt": Array [
              "VpcEcsAgentEndpointSecurityGroup0260F9C0",
              "GroupId",
            ],
          },
        ],
        "ServiceName": Object {
          "Fn::Join": Array [
            "",
            Array [
              "com.amazonaws.",
              Object {
                "Ref": "AWS::Region",
              },
              ".ecs-agent",
            ],
          ],
        },
        "SubnetIds": Array [
          Object {
            "Ref": "VpcMainSubnet1Subnet501A7278",
          },
          Object {
            "Ref": "VpcMainSubnet2Subnet4C1ED704",
          },
        ],
        "VpcEndpointType": "Interface",
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::VPCEndpoint",
    },
    "VpcEcsAgentEndpointSecurityGroup0260F9C0": Object {
      "Properties": Object {
        "GroupDescription": "Core-Cos-Gal-CiCd-SolarSystem/Vpc/EcsAgentEndpoint/SecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "SecurityGroupIngress": Array [
          Object {
            "CidrIp": Object {
              "Fn::GetAtt": Array [
                "Vpc8378EB38",
                "CidrBlock",
              ],
            },
            "Description": Object {
              "Fn::Join": Array [
                "",
                Array [
                  "from ",
                  Object {
                    "Fn::GetAtt": Array [
                      "Vpc8378EB38",
                      "CidrBlock",
                    ],
                  },
                  ":443",
                ],
              ],
            },
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443,
          },
        ],
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Core-Cos-Gal-CiCd-SolarSystem/Vpc",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "VpcEcsEndpoint81699F6A": Object {
      "Properties": Object {
        "PrivateDnsEnabled": true,
        "SecurityGroupIds": Array [
          Object {
            "Fn::GetAtt": Array [
              "VpcEcsEndpointSecurityGroup6B2A7280",
              "GroupId",
            ],
          },
        ],
        "ServiceName": Object {
          "Fn::Join": Array [
            "",
            Array [
              "com.amazonaws.",
              Object {
                "Ref": "AWS::Region",
              },
              ".ecs",
            ],
          ],
        },
        "SubnetIds": Array [
          Object {
            "Ref": "VpcMainSubnet1Subnet501A7278",
          },
          Object {
            "Ref": "VpcMainSubnet2Subnet4C1ED704",
          },
        ],
        "VpcEndpointType": "Interface",
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::VPCEndpoint",
    },
    "VpcEcsEndpointSecurityGroup6B2A7280": Object {
      "Properties": Object {
        "GroupDescription": "Core-Cos-Gal-CiCd-SolarSystem/Vpc/EcsEndpoint/SecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "SecurityGroupIngress": Array [
          Object {
            "CidrIp": Object {
              "Fn::GetAtt": Array [
                "Vpc8378EB38",
                "CidrBlock",
              ],
            },
            "Description": Object {
              "Fn::Join": Array [
                "",
                Array [
                  "from ",
                  Object {
                    "Fn::GetAtt": Array [
                      "Vpc8378EB38",
                      "CidrBlock",
                    ],
                  },
                  ":443",
                ],
              ],
            },
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443,
          },
        ],
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Core-Cos-Gal-CiCd-SolarSystem/Vpc",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "VpcEcsTelemetryEndpointF3189EDA": Object {
      "Properties": Object {
        "PrivateDnsEnabled": true,
        "SecurityGroupIds": Array [
          Object {
            "Fn::GetAtt": Array [
              "VpcEcsTelemetryEndpointSecurityGroupC8027D56",
              "GroupId",
            ],
          },
        ],
        "ServiceName": Object {
          "Fn::Join": Array [
            "",
            Array [
              "com.amazonaws.",
              Object {
                "Ref": "AWS::Region",
              },
              ".ecs-telemetry",
            ],
          ],
        },
        "SubnetIds": Array [
          Object {
            "Ref": "VpcMainSubnet1Subnet501A7278",
          },
          Object {
            "Ref": "VpcMainSubnet2Subnet4C1ED704",
          },
        ],
        "VpcEndpointType": "Interface",
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::VPCEndpoint",
    },
    "VpcEcsTelemetryEndpointSecurityGroupC8027D56": Object {
      "Properties": Object {
        "GroupDescription": "Core-Cos-Gal-CiCd-SolarSystem/Vpc/EcsTelemetryEndpoint/SecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "SecurityGroupIngress": Array [
          Object {
            "CidrIp": Object {
              "Fn::GetAtt": Array [
                "Vpc8378EB38",
                "CidrBlock",
              ],
            },
            "Description": Object {
              "Fn::Join": Array [
                "",
                Array [
                  "from ",
                  Object {
                    "Fn::GetAtt": Array [
                      "Vpc8378EB38",
                      "CidrBlock",
                    ],
                  },
                  ":443",
                ],
              ],
            },
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443,
          },
        ],
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Core-Cos-Gal-CiCd-SolarSystem/Vpc",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "VpcMainSubnet1RouteTableAssociation735BC7DF": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "VpcMainSubnet1RouteTableB8CBA6F0",
        },
        "SubnetId": Object {
          "Ref": "VpcMainSubnet1Subnet501A7278",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VpcMainSubnet1RouteTableB8CBA6F0": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Core-Cos-Gal-CiCd-SolarSystem/Vpc/MainSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VpcMainSubnet1Subnet501A7278": Object {
      "Properties": Object {
        "AvailabilityZone": "dummy1a",
        "CidrBlock": "10.0.4.0/26",
        "MapPublicIpOnLaunch": false,
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Core-Cos-Gal-CiCd-SolarSystem/Vpc/MainSubnet1",
          },
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Main",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Isolated",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VpcMainSubnet2RouteTableAssociationE08931BA": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "VpcMainSubnet2RouteTableBE78C2D2",
        },
        "SubnetId": Object {
          "Ref": "VpcMainSubnet2Subnet4C1ED704",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VpcMainSubnet2RouteTableBE78C2D2": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Core-Cos-Gal-CiCd-SolarSystem/Vpc/MainSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VpcMainSubnet2Subnet4C1ED704": Object {
      "Properties": Object {
        "AvailabilityZone": "dummy1b",
        "CidrBlock": "10.0.4.64/26",
        "MapPublicIpOnLaunch": false,
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Core-Cos-Gal-CiCd-SolarSystem/Vpc/MainSubnet2",
          },
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Main",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Isolated",
          },
        ],
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VpcS3Gateway0FF2BD16": Object {
      "Properties": Object {
        "RouteTableIds": Array [
          Object {
            "Ref": "VpcMainSubnet1RouteTableB8CBA6F0",
          },
          Object {
            "Ref": "VpcMainSubnet2RouteTableBE78C2D2",
          },
        ],
        "ServiceName": Object {
          "Fn::Join": Array [
            "",
            Array [
              "com.amazonaws.",
              Object {
                "Ref": "AWS::Region",
              },
              ".s3",
            ],
          ],
        },
        "VpcEndpointType": "Gateway",
        "VpcId": Object {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::VPCEndpoint",
    },
    "ZoneA5DE4B68": Object {
      "Properties": Object {
        "HostedZoneConfig": Object {
          "Comment": "Core Main Zone for CiCd SolarSystem",
        },
        "Name": "cicd.cos.com.",
      },
      "Type": "AWS::Route53::HostedZone",
    },
    "ZoneDelegationAE61034B": Object {
      "Properties": Object {
        "Comment": "Core Zone Delegation for CiCd SolarSystem.",
        "HostedZoneId": Object {
          "Fn::ImportValue": "Core-Cos-Cosmos:ExportsOutputRefRootZone831A5F27FABD99AF",
        },
        "Name": "cicd.cos.com.",
        "ResourceRecords": Object {
          "Fn::GetAtt": Array [
            "ZoneA5DE4B68",
            "NameServers",
          ],
        },
        "TTL": "1800",
        "Type": "NS",
      },
      "Type": "AWS::Route53::RecordSet",
    },
  },
}
`;
