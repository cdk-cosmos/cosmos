{"version":3,"sources":["send.ts","index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"../src","sourcesContent":["import { request } from 'https';\nimport { IncomingMessage } from 'http';\nimport { parse } from 'url';\nimport { Context, CloudFormationCustomResourceEvent, CloudFormationCustomResourceResponse } from 'aws-lambda';\n\nconst sendRequest = async (url: string, body: object): Promise<IncomingMessage> => {\n  const parsedUrl = parse(url);\n  const responseBody = JSON.stringify(body);\n  return new Promise<IncomingMessage>((resolve, reject): void => {\n    const req = request(\n      {\n        hostname: parsedUrl.hostname,\n        port: 443,\n        path: parsedUrl.path,\n        method: 'PUT',\n        headers: {\n          'content-type': 'application/json',\n          'content-length': responseBody.length,\n        },\n      },\n      response => resolve(response)\n    );\n    req.on('error', error => reject(error));\n    req.write(responseBody);\n    req.end();\n  });\n};\n\nexport const send = async (\n  event: CloudFormationCustomResourceEvent,\n  context: Context,\n  status: 'SUCCESS' | 'FAILED',\n  attributes?: object,\n  physicalResourceId?: string,\n  error?: Error\n): Promise<void> => {\n  try {\n    const url = event.ResponseURL;\n    let reason = error ? `Error: ${error.message}\\n` : '';\n    reason += `See the details in CloudWatch Log Stream: ${context.logStreamName}`;\n    const data: CloudFormationCustomResourceResponse = {\n      Status: status,\n      Reason: reason,\n      PhysicalResourceId: physicalResourceId || context.logStreamName,\n      StackId: event.StackId,\n      RequestId: event.RequestId,\n      LogicalResourceId: event.LogicalResourceId,\n      Data: attributes,\n    };\n    console.log('Sending Response:', url, data);\n    const response = await sendRequest(url, data);\n    console.log(`Status code: ${response.statusCode} Status message: ${response.statusMessage}`);\n  } catch (error) {\n    console.error('send() failed executing https.request(): ' + error);\n  }\n};\n","import 'source-map-support/register';\nimport { Context, CloudFormationCustomResourceEvent } from 'aws-lambda';\nimport { Credentials, CloudFormation, ChainableTemporaryCredentials } from 'aws-sdk';\nimport { send } from './send';\n\ninterface Props {\n  ServiceToken: string;\n  Exports: string[];\n  ShouldErrorIfNotFound?: boolean;\n  AssumeRoleArn?: string;\n}\n\ninterface Attributes {\n  [key: string]: string | undefined;\n}\n\nexport const handler = async (event: CloudFormationCustomResourceEvent, context: Context): Promise<void> => {\n  try {\n    console.log('Event:', JSON.stringify(event, null, 2));\n\n    const { Exports, ShouldErrorIfNotFound, AssumeRoleArn } = event.ResourceProperties as Props;\n    const attributes: Attributes = {};\n\n    if (event.RequestType !== 'Delete') {\n      let cred: Credentials | undefined;\n      if (AssumeRoleArn) {\n        cred = new ChainableTemporaryCredentials({\n          params: {\n            RoleArn: AssumeRoleArn,\n            RoleSessionName: 'cross-account-stack-ref-handler',\n          },\n        });\n        await cred.getPromise();\n      }\n\n      const cloudformation = new CloudFormation({ credentials: cred });\n\n      const req = await cloudformation.listExports().promise();\n      for (const exp of Exports) {\n        const ref = req.Exports?.find(x => x.Name === exp);\n        if (!ref && ShouldErrorIfNotFound) throw new Error(`Export ${exp} not found.`);\n        attributes[exp] = ref?.Value || '';\n      }\n    }\n\n    await send(event, context, 'SUCCESS', attributes, event.LogicalResourceId);\n  } catch (error) {\n    console.error('Error:', error);\n    await send(event, context, 'FAILED', undefined, event.LogicalResourceId, error);\n  }\n};\n"]}